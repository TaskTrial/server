// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  // previewFeatures = ["prismaSchemaFolder"]
  output          = "./generated/prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Timelog {
  id          String   @id @default(uuid()) @db.Uuid
  taskId      String   @db.Uuid
  userId      String   @db.Uuid
  startTime   DateTime
  endTime     DateTime
  description String?  @db.Text

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
  @@index([startTime, endTime]) // for time-range queries
  @@map("timelogs")
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  taskId    String   @db.Uuid
  userId    String   @db.Uuid
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
  @@index([createdAt]) // for pagination and sorting
  @@map("comments")
}

model ActivityLog {
  id         String   @id @default(uuid()) @db.Uuid
  entityType String // "task", "project", "team", etc.
  entityId   String   @db.Uuid
  userId     String   @db.Uuid
  action     String // "created", "updated", "commented", etc.
  details    Json?
  createdAt  DateTime @default(now())

  // Relations
  user         User          @relation(fields: [userId], references: [id])
  organization Organization? @relation(fields: [entityId], references: [id], map: "activitylog_organization_fkey")
  project      Project?      @relation(fields: [entityId], references: [id], map: "activitylog_project_fkey")
  team         Team?         @relation(fields: [entityId], references: [id], map: "activitylog_team_fkey")
  task         Task?         @relation(fields: [entityId], references: [id], map: "activitylog_task_fkey")

  @@index([entityId, entityType])
  @@index([userId])
  @@index([createdAt])
  @@map("activity_logs")
}

model Department {
  id             String    @id @default(uuid()) @db.Uuid
  name           String    @db.VarChar(100)
  description    String?   @db.Text
  organizationId String    @db.Uuid
  managerId      String    @db.Uuid
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  manager      User         @relation("DepartmentManager", fields: [managerId], references: [id])
  teams        Team[]
  users        User[]
  Report       Report[]

  @@unique([organizationId, name]) // to prevent duplicate department names within an organization
  @@index([organizationId])
  @@index([managerId])
  @@map("departments")
}

model Notification {
  id         String    @id @default(uuid()) @db.Uuid
  userId     String    @db.Uuid
  content    String    @db.Text
  isRead     Boolean   @default(false)
  type       String    @db.VarChar(50)
  metadata   Json?
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  entityType String?   @db.VarChar(50) // for reference to specific entity
  entityId   String?   @db.Uuid // for reference to specific entity

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@index([isRead])
  @@index([entityId, entityType]) // for queries filtering by entity
  @@map("notifications")
}

model Organization {
  id                       String    @id @default(uuid()) @db.Uuid
  name                     String    @db.VarChar(100)
  description              String?   @db.Text
  industry                 String    @db.VarChar(50)
  sizeRange                String    @db.VarChar(50)
  website                  String?   @db.VarChar(255)
  logoUrl                  String?
  isVerified               Boolean   @default(false)
  status                   String    @db.VarChar(20)
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  deletedAt                DateTime?
  createdBy                String    @db.Uuid
  address                  String?   @db.Text
  contactEmail             String?   @db.VarChar(255)
  contactPhone             String?   @db.VarChar(50)
  emailVerificationOTP     String?
  emailVerificationExpires DateTime?

  // Relations
  creator      User                @relation("OrganizationCreator", fields: [createdBy], references: [id])
  departments  Department[]
  teams        Team[]
  projects     Project[]
  users        User[]              @relation("OrganizationEmployees")
  reports      Report[]
  owners       OrganizationOwner[]
  templates    TaskTemplate[] // relation to task templates
  activityLogs ActivityLog[] // relation to activity logs

  @@unique([name])
  @@index([createdBy])
  @@map("organizations")
}

model OrganizationOwner {
  id             String   @id @default(uuid()) @db.Uuid
  organizationId String   @db.Uuid
  userId         String   @db.Uuid
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId]) // to prevent duplicate owner assignments
  @@index([organizationId])
  @@index([userId])
  @@map("organization_owners")
}

model Project {
  id             String       @id @default(uuid()) @db.Uuid
  name           String       @db.VarChar(100)
  description    String?      @db.Text
  status         String       @db.VarChar(20)
  createdBy      String       @db.Uuid
  organizationId String       @db.Uuid
  teamId         String       @db.Uuid
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  priority       TaskPriority @default(MEDIUM) // for project prioritization
  progress       Float?       @default(0) // for progress tracking
  budget         Float? // for budget tracking
  lastModifiedBy String?      @db.Uuid // for audit

  // Relations
  creator       User            @relation("ProjectCreator", fields: [createdBy], references: [id])
  modifier      User?           @relation("ProjectModifier", fields: [lastModifiedBy], references: [id])
  organization  Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  team          Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  sprints       Sprint[]
  tasks         Task[]
  reports       Report[]
  activityLogs  ActivityLog[]
  ProjectMember ProjectMember[]

  @@unique([organizationId, name]) // to prevent duplicate project names within an organization
  @@index([organizationId])
  @@index([teamId])
  @@index([createdBy])
  @@index([status])
  @@map("projects")
}

model ProjectMember {
  id        String    @id @default(uuid()) @db.Uuid
  projectId String    @db.Uuid
  userId    String    @db.Uuid
  role      String    @db.VarChar(50) // e.g., "DEVELOPER", "TESTER", "PRODUCT_OWNER"
  isActive  Boolean   @default(true)
  joinedAt  DateTime  @default(now())
  leftAt    DateTime?

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@unique([projectId, userId]) // A user can only have one active role in a project
  @@index([projectId])
  @@index([userId])
  @@map("project_members")
}

model Sprint {
  id          String   @id @default(uuid()) @db.Uuid
  projectId   String   @db.Uuid
  name        String   @db.VarChar(100)
  description String?  @db.Text
  startDate   DateTime
  endDate     DateTime
  status      String   @db.VarChar(20)
  goal        String?  @db.Text // for sprint goal
  order       Int      @default(0) // for ordering sprints

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]

  @@unique([projectId, name]) // to prevent duplicate sprint names within a project
  @@index([projectId])
  @@index([status])
  @@map("sprints")
}

model Report {
  id          String     @id @default(uuid()) @db.Uuid
  name        String     @db.VarChar(100)
  description String?    @db.Text
  reportType  ReportType
  format      String     @db.VarChar(20)
  parameters  Json?
  filePath    String
  generatedBy String     @db.Uuid
  createdAt   DateTime   @default(now())

  organizationId String? @db.Uuid
  teamId         String? @db.Uuid
  projectId      String? @db.Uuid
  departmentId   String? @db.Uuid
  userId         String? @db.Uuid

  // Storage information
  storageProvider String? @db.VarChar(50) // e.g., "s3", "azure", "local"
  storageKey      String // Cloud storage reference

  // Relations
  generator    User          @relation(fields: [generatedBy], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])
  team         Team?         @relation(fields: [teamId], references: [id])
  project      Project?      @relation(fields: [projectId], references: [id])
  department   Department?   @relation(fields: [departmentId], references: [id])
  user         User?         @relation("UserReports", fields: [userId], references: [id])

  @@index([generatedBy])
  @@index([organizationId])
  @@index([teamId])
  @@index([projectId])
  @@index([createdAt])
  @@map("reports")
}

model Task {
  id             String       @id @default(uuid()) @db.Uuid
  title          String       @db.VarChar(200)
  description    String?      @db.Text
  priority       TaskPriority
  status         TaskStatus
  rate           Float?
  projectId      String       @db.Uuid
  sprintId       String?      @db.Uuid
  createdBy      String       @db.Uuid
  assignedTo     String?      @db.Uuid
  dueDate        DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  estimatedTime  Float? // for time estimation (in hours)
  actualTime     Float? // for actual time spent
  parentId       String?      @db.Uuid // for subtask hierarchy
  order          Int          @default(0) // for custom ordering
  labels         String[] // for task categorization
  lastModifiedBy String?      @db.Uuid // for audit

  // Relations
  project      Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sprint       Sprint?          @relation(fields: [sprintId], references: [id])
  creator      User             @relation("TaskCreator", fields: [createdBy], references: [id])
  assignee     User?            @relation("TaskAssignee", fields: [assignedTo], references: [id])
  modifier     User?            @relation("TaskModifier", fields: [lastModifiedBy], references: [id])
  attachments  TaskAttachment[]
  comments     Comment[]
  timelogs     Timelog[]
  dependencies TaskDependency[] @relation("DependentTask")
  dependentOn  TaskDependency[] @relation("MainTask")
  parent       Task?            @relation("TaskHierarchy", fields: [parentId], references: [id]) // Added for subtask hierarchy
  subtasks     Task[]           @relation("TaskHierarchy") // for subtask hierarchy
  activityLogs ActivityLog[] // relation to activity logs

  @@index([projectId])
  @@index([sprintId])
  @@index([createdBy])
  @@index([assignedTo])
  @@index([status])
  @@index([priority])
  @@index([parentId]) // for querying subtasks efficiently
  @@map("tasks")
}

model TaskAttachment {
  id              String   @id @default(uuid()) @db.Uuid
  taskId          String   @db.Uuid
  fileName        String   @db.VarChar(255)
  fileType        String   @db.VarChar(50)
  filePath        String
  fileSize        Int
  uploadedBy      String   @db.Uuid
  createdAt       DateTime @default(now())
  storageProvider String?  @db.VarChar(50) // for storage provider (e.g., "s3", "azure")
  storageKey      String // for cloud storage reference

  // Relations
  task     Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploader User @relation(fields: [uploadedBy], references: [id])

  @@index([taskId])
  @@index([uploadedBy])
  @@index([fileType]) // for filtering by file type
  @@map("task_attachments")
}

model TaskDependency {
  id              String         @id @default(uuid()) @db.Uuid
  taskId          String         @db.Uuid
  dependentTaskId String         @db.Uuid
  dependencyType  DependencyType
  description     String?        @db.Text // for dependency description

  // Relations
  task          Task @relation("MainTask", fields: [taskId], references: [id], onDelete: Cascade)
  dependentTask Task @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)

  @@unique([taskId, dependentTaskId]) // to prevent duplicate dependencies
  @@index([taskId])
  @@index([dependentTaskId])
  @@map("task_dependencies")
}

model TaskTemplate {
  id             String       @id @default(uuid()) @db.Uuid
  name           String       @db.VarChar(100)
  description    String?      @db.Text
  priority       TaskPriority
  estimatedTime  Float?
  organizationId String       @db.Uuid
  createdBy      String       @db.Uuid
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  checklist      Json? // predefined checklist items
  labels         String[] // task categorization
  isPublic       Boolean      @default(false)

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, name]) // Prevent duplicate templates within organization
  @@index([organizationId])
  @@map("task_templates")
}

model Team {
  id             String    @id @default(uuid()) @db.Uuid
  name           String    @db.VarChar(100)
  description    String?   @db.Text
  createdBy      String    @db.Uuid
  organizationId String    @db.Uuid
  departmentId   String?   @db.Uuid
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  avatar         String? // for team avatar/logo

  // Relations
  creator      User          @relation("TeamCreator", fields: [createdBy], references: [id])
  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  department   Department?   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  members      TeamMember[]
  projects     Project[]
  reports      Report[]
  activityLogs ActivityLog[] // relation to activity logs

  @@unique([organizationId, name]) // to prevent duplicate team names within an organization
  @@index([organizationId])
  @@index([departmentId])
  @@index([createdBy])
  @@map("teams")
}

model TeamMember {
  id        String         @id @default(uuid()) @db.Uuid
  teamId    String         @db.Uuid
  userId    String         @db.Uuid
  role      TeamMemberRole
  joinedAt  DateTime       @default(now())
  isActive  Boolean        @default(true)
  deletedAt DateTime?

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId]) // to prevent duplicate team memberships
  @@index([teamId])
  @@index([userId])
  @@map("team_members")
}

model User {
  id                       String    @id @default(uuid()) @db.Uuid
  email                    String    @unique @db.VarChar(255)
  username                 String    @unique @db.VarChar(50)
  password                 String    @db.VarChar(255)
  firstName                String    @db.VarChar(100)
  lastName                 String    @db.VarChar(100)
  role                     UserRole
  profilePic               String?
  departmentId             String?   @db.Uuid
  organizationId           String?   @db.Uuid
  isOwner                  Boolean   @default(false)
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  isActive                 Boolean   @default(true)
  deletedAt                DateTime?
  phoneNumber              String?   @db.VarChar(255)
  jobTitle                 String?   @db.VarChar(100)
  timezone                 String?   @db.VarChar(50)
  bio                      String?   @db.Text
  preferences              Json? // for user-specific settings
  emailVerificationToken   String?
  emailVerificationExpires DateTime?
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  refreshToken             String?
  lastLogin                DateTime?
  lastLogout               DateTime?

  // Relations
  department           Department?         @relation(fields: [departmentId], references: [id])
  organization         Organization?       @relation("OrganizationEmployees", fields: [organizationId], references: [id])
  createdOrganizations Organization[]      @relation("OrganizationCreator")
  ownedOrganizations   OrganizationOwner[]
  managedDepartments   Department[]        @relation("DepartmentManager")
  createdTeams         Team[]              @relation("TeamCreator")
  teamMemberships      TeamMember[]
  projectMemberships   ProjectMember[]
  createdProjects      Project[]           @relation("ProjectCreator")
  modifiedProjects     Project[]           @relation("ProjectModifier")
  createdTasks         Task[]              @relation("TaskCreator")
  assignedTasks        Task[]              @relation("TaskAssignee")
  modifiedTasks        Task[]              @relation("TaskModifier")
  notifications        Notification[]
  timelogs             Timelog[]
  comments             Comment[]
  taskAttachments      TaskAttachment[]
  generatedReports     Report[]
  userReports          Report[]            @relation("UserReports")
  permissions          Permission[] // relation to permissions
  activityLogs         ActivityLog[] // relation to activity logs as performer

  @@index([departmentId])
  @@index([organizationId])
  @@index([role])
  @@index([isActive])
  @@map("users")
}

model Permission {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  entityType  String // "project", "team", etc.
  entityId    String   @db.Uuid
  permissions Json // detailed permission structure
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, entityType, entityId])
  @@index([entityId, entityType])
  @@map("permissions")
}

enum ReportType {
  ORGANIZATION
  DEPARTMENT
  TEAM
  PROJECT
  TASK
  USER_PERFORMANCE
}

enum EntityType {
  ORGANIZATION
  TEAM
  PROJECT
  TASK
  USER
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum DependencyType {
  BLOCKS
  REQUIRES
  RELATES_TO
  DUPLICATES
}

enum TeamMemberRole {
  MEMBER
  LEADER
  VIEWER
}

enum UserRole {
  OWNER
  MANAGER
  ADMIN
  MEMBER
  GUEST
}
