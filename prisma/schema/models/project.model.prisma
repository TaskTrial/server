model Project {
  id             String   @id @default(uuid()) @db.Uuid
  name           String   @db.VarChar(100)
  description    String?  @db.Text
  status         String   @db.VarChar(20)
  createdBy      String   @db.Uuid
  organizationId String   @db.Uuid
  teamId         String   @db.Uuid
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  // Relations
  creator      User         @relation("ProjectCreator", fields: [createdBy], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  team         Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  sprints      Sprint[]
  tasks        Task[]

  @@map("projects")
  @@index([organizationId])
  @@index([teamId])
  @@index([createdBy])
}

model Sprint {
  id          String   @id @default(uuid()) @db.Uuid
  projectId   String   @db.Uuid
  name        String   @db.VarChar(100)
  description String?  @db.Text
  startDate   DateTime
  endDate     DateTime
  status      String   @db.VarChar(20)

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]

  @@map("sprints")
  @@index([projectId])
}