model Task {
  id          String       @id @default(uuid()) @db.Uuid
  title       String
  description String?
  priority    TaskPriority
  status      TaskStatus
  rate        Float?
  projectId   String       @db.Uuid
  sprintId    String?      @db.Uuid
  createdBy   String       @db.Uuid
  assignedTo  String?      @db.Uuid
  dueDate     DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  project      Project          @relation(fields: [projectId], references: [id])
  sprint       Sprint?          @relation(fields: [sprintId], references: [id])
  creator      User             @relation("TaskCreator", fields: [createdBy], references: [id])
  assignee     User?            @relation("TaskAssignee", fields: [assignedTo], references: [id])
  attachments  TaskAttachment[]
  comments     Comment[]
  timelogs     Timelog[]
  dependencies TaskDependency[] @relation("DependentTask")
  dependentOn  TaskDependency[] @relation("MainTask")

  @@map("tasks")
}

model TaskAttachment {
  id         String   @id @default(uuid()) @db.Uuid
  taskId     String   @db.Uuid
  fileName   String
  fileType   String
  filePath   String
  fileSize   Int
  uploadedBy String   @db.Uuid
  createdAt  DateTime @default(now())

  // Relations
  task     Task @relation(fields: [taskId], references: [id])
  uploader User @relation(fields: [uploadedBy], references: [id])

  @@map("task_attachments")
}

model TaskDependency {
  id              String @id @default(uuid()) @db.Uuid
  taskId          String @db.Uuid
  dependentTaskId String @db.Uuid
  dependencyType  String

  // Relations
  task          Task @relation("MainTask", fields: [taskId], references: [id])
  dependentTask Task @relation("DependentTask", fields: [dependentTaskId], references: [id])

  @@map("task_dependencies")
}
