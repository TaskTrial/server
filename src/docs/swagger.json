{
  "openapi": "3.0.0",
  "info": {
    "title": "TaskTrial APIs",
    "version": "1.0.0",
    "description": "Project Management App",
    "contact": {
      "email": "tasktrial27@gmail.com"
    },
    "license": {
      "name": "MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local development server"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "User",
      "description": "User management"
    },
    {
      "name": "Organization",
      "description": "Organization management"
    },
    {
      "name": "Department",
      "description": "Department management"
    },
    {
      "name": "Team",
      "description": "Team management"
    },
    {
      "name": "Project",
      "description": "Project management"
    },
    {
      "name": "Sprint",
      "description": "Sprint management"
    },
    {
      "name": "Task",
      "description": "Task management"
    },
    {
      "name": "Activity Logs",
      "description": "Activity Logs management"
    }
  ],
  "paths": {
    "/api/auth/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "Creates a new user account and sends verification OTP to email",
        "description": "Register a new user with email, password, and personal details. Sends verification OTP to the provided email.",
        "operationId": "signup",
        "requestBody": {
          "description": "User registration data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password",
                  "firstName",
                  "lastName",
                  "username"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "minLength": 6,
                    "example": "securePassword123"
                  },
                  "firstName": {
                    "type": "string",
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Doe"
                  },
                  "username": {
                    "type": "string",
                    "example": "johndoe"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully. Verification OTP sent to email.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User created. Please verify your email."
                    },
                    "userId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or user already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User with this email or username already exists"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Too many requests, please try again later."
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/auth/resendOTP": {
      "post": {
        "tags": ["Auth"],
        "summary": "Resend OTP code for email verification",
        "description": "Generates a new OTP and sends it to the user's email if the previous one expired or wasn't received.",
        "operationId": "resendOTP",
        "requestBody": {
          "description": "Email address to resend OTP",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP resent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Code sent successfully. Please check your email"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Please enter a valid email"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Too many requests, please try again later."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to send email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "object"
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to send verification email. Please try again later."
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/auth/verifyEmail": {
      "post": {
        "tags": ["Auth"],
        "summary": "Verify user's email address using OTP",
        "description": "Validates the OTP sent to user's email and activates their account if verification is successful.",
        "operationId": "verifyEmail",
        "requestBody": {
          "description": "Email and OTP for verification",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "otp"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "otp": {
                    "type": "string",
                    "description": "6-digit verification code",
                    "example": "123456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email verified successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error, invalid OTP, or email already verified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired OTP"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Too many requests, please try again later."
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/auth/signin": {
      "post": {
        "tags": ["Auth"],
        "summary": "Authenticate user and return JWT tokens",
        "description": "Validates user credentials and returns access and refresh tokens if authentication is successful.",
        "operationId": "signin",
        "requestBody": {
          "description": "User credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "yourpassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User login successfully"
                    },
                    "accessToken": {
                      "type": "string",
                      "description": "JWT access token",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "refreshToken": {
                      "type": "string",
                      "description": "JWT refresh token (also set as HTTP-only cookie)",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "email": {
                          "type": "string",
                          "format": "email"
                        },
                        "name": {
                          "type": "string"
                        },
                        "role": {
                          "type": "string",
                          "enum": ["MEMBER", "ADMIN", "SUPER_ADMIN"]
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "type": "string",
                  "example": "refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Max-Age=604800"
                },
                "description": "Refresh token set as HTTP-only cookie"
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "\"email\" is required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid email or password"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Account not activated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Account not activated. Please verify your email"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Too many requests, please try again later."
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/auth/forgotPassword": {
      "post": {
        "tags": ["Auth"],
        "summary": "Initiate password reset process",
        "description": "Sends a password reset OTP to the user's email address if the account exists.",
        "operationId": "forgotPassword",
        "requestBody": {
          "description": "User's email address",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset OTP sent if account exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password reset OTP sent"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "\"email\" is required"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Too many requests, please try again later."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to send email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Failed to send password reset email"
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/auth/resetPassword": {
      "post": {
        "tags": ["Auth"],
        "summary": "Reset user password using OTP",
        "description": "Allows users to reset their password by providing a valid OTP sent to their email.",
        "operationId": "resetPassword",
        "requestBody": {
          "description": "Password reset details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address"
                  },
                  "otp": {
                    "type": "string",
                    "description": "One-time password received via email"
                  },
                  "newPassword": {
                    "type": "string",
                    "format": "password",
                    "description": "New password to set",
                    "minLength": 6
                  }
                },
                "required": ["email", "otp", "newPassword"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password reset successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Invalid or expired reset token"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Validation error message"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [],
        "x-rate-limit": {
          "description": "Rate limited to prevent brute force attacks"
        }
      }
    },
    "/api/auth/forgotPasswordWithoutEmail": {
      "post": {
        "tags": ["Auth"],
        "summary": "Initiate password reset using refreshToken",
        "description": "Generates and sends a password reset OTP to the user's email identified by their refreshToken. Requires valid refreshToken cookie.",
        "operationId": "forgotPasswordWithoutEmail",
        "responses": {
          "200": {
            "description": "OTP sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password reset OTP sent"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "No token provided"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "x-rate-limit": {
          "description": "Rate limited to prevent abuse"
        }
      }
    },
    "/api/auth/resetPasswordWithoutEmail": {
      "post": {
        "tags": ["Auth"],
        "summary": "Reset password using OTP (refreshToken flow)",
        "description": "Resets user's password using OTP received via email. Requires valid refreshToken cookie.",
        "operationId": "resetPasswordWithoutEmail",
        "requestBody": {
          "description": "Password reset details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "otp": {
                    "type": "string",
                    "description": "One-time password received via email"
                  },
                  "newPassword": {
                    "type": "string",
                    "format": "password",
                    "description": "New password to set",
                    "minLength": 6
                  }
                },
                "required": ["otp", "newPassword"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password reset successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Invalid or expired reset token"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Validation error message"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "No token provided"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "x-rate-limit": {
          "description": "Rate limited to prevent brute force attacks"
        }
      }
    },
    "/api/auth/refreshAccessToken": {
      "post": {
        "tags": ["Auth"],
        "summary": "Generate new access token using refresh token",
        "description": "Creates a new access token when provided with a valid refresh token.",
        "operationId": "refreshAccessToken",
        "requestBody": {
          "description": "Refresh token",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["refreshToken"],
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "description": "Valid refresh token obtained during signin",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New access token generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "description": "New JWT access token",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Refresh token missing",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Refresh token missing"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Invalid or mismatched refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid refresh token"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Too many requests, please try again later."
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/users/all": {
      "get": {
        "tags": ["User"],
        "summary": "Get all users with pagination",
        "description": "Retrieves a paginated list of all users. Requires admin permission.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "List of users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Users retrieved successfully"
                    },
                    "currentPage": {
                      "type": "integer",
                      "example": 1
                    },
                    "totalPages": {
                      "type": "integer",
                      "example": 5
                    },
                    "totalUsers": {
                      "type": "integer",
                      "example": 42
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                          },
                          "email": {
                            "type": "string",
                            "format": "email",
                            "example": "user@example.com"
                          },
                          "firstName": {
                            "type": "string",
                            "example": "John"
                          },
                          "lastName": {
                            "type": "string",
                            "example": "Doe"
                          },
                          "role": {
                            "type": "string",
                            "example": "USER"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User does not have admin permissions"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": ["User"],
        "summary": "Get full user profile by ID",
        "description": "Retrieves detailed information about a specific user. Requires authentication and appropriate permissions.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User retrieved successfully"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "user@example.com"
                        },
                        "username": {
                          "type": "string",
                          "example": "johndoe"
                        },
                        "firstName": {
                          "type": "string",
                          "example": "John"
                        },
                        "lastName": {
                          "type": "string",
                          "example": "Doe"
                        },
                        "role": {
                          "type": "string",
                          "example": "USER"
                        },
                        "profilePic": {
                          "type": "string",
                          "nullable": true,
                          "example": "https://example.com/profile.jpg"
                        },
                        "phoneNumber": {
                          "type": "string",
                          "nullable": true,
                          "example": "+1234567890"
                        },
                        "jobTitle": {
                          "type": "string",
                          "nullable": true,
                          "example": "Software Developer"
                        },
                        "timezone": {
                          "type": "string",
                          "nullable": true,
                          "example": "America/New_York"
                        },
                        "bio": {
                          "type": "string",
                          "nullable": true,
                          "example": "Software developer with 5 years of experience"
                        },
                        "preferences": {
                          "type": "object",
                          "nullable": true
                        },
                        "isActive": {
                          "type": "boolean",
                          "example": true
                        },
                        "isOwner": {
                          "type": "boolean",
                          "example": false
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "lastLogin": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true
                        },
                        "lastLogout": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true
                        },
                        "department": {
                          "type": "object",
                          "nullable": true,
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "name": {
                              "type": "string"
                            }
                          }
                        },
                        "organization": {
                          "type": "object",
                          "nullable": true,
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "name": {
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "entityType": {
                                "type": "string"
                              },
                              "entityId": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "permissions": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "teamMemberships": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "team": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "format": "uuid"
                                  },
                                  "name": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "activityLogs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "action": {
                                "type": "string"
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User does not have required permissions"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": ["User"],
        "summary": "Update user account",
        "description": "Updates user account information. Users can update their own basic information, while admins can modify additional fields.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "User ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Doe"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "example": "+1234567890"
                  },
                  "jobTitle": {
                    "type": "string",
                    "example": "Senior Developer"
                  },
                  "timezone": {
                    "type": "string",
                    "example": "America/New_York"
                  },
                  "bio": {
                    "type": "string",
                    "example": "Software developer with extensive experience"
                  },
                  "role": {
                    "type": "string",
                    "description": "Admin only field",
                    "example": "ADMIN"
                  },
                  "departmentId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Admin only field"
                  },
                  "organizationId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Admin only field"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User account updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User account updated successfully"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "email": {
                          "type": "string",
                          "format": "email"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "role": {
                          "type": "string"
                        },
                        "phoneNumber": {
                          "type": "string",
                          "nullable": true
                        },
                        "jobTitle": {
                          "type": "string",
                          "nullable": true
                        },
                        "timezone": {
                          "type": "string",
                          "nullable": true
                        },
                        "bio": {
                          "type": "string",
                          "nullable": true
                        },
                        "departmentId": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": true
                        },
                        "organizationId": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": true
                        },
                        "profilePic": {
                          "type": "string",
                          "nullable": true
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input or validation error"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User does not have required permissions or account is not active"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/update-password/{id}": {
      "patch": {
        "tags": ["User"],
        "summary": "Update user password",
        "description": "Allows a user to update their password by providing the old and new passwords. User can only update their own password.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "User ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["oldPassword", "newPassword"],
                "properties": {
                  "oldPassword": {
                    "type": "string",
                    "description": "User's current password",
                    "example": "CurrentP@ssw0rd"
                  },
                  "newPassword": {
                    "type": "string",
                    "description": "New password to set",
                    "example": "NewP@ssw0rd123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password updated successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input, validation error, incorrect old password, or new password same as old password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Incorrect old password"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User does not have required permissions"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/delete/{id}": {
      "delete": {
        "tags": ["User"],
        "summary": "Soft delete a user",
        "description": "Soft deletes a user by setting deletedAt to current date and making them inactive. Admin permission required.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "User ID to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - User already deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User already deleted"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User does not have admin permissions"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/restore/{id}": {
      "patch": {
        "tags": ["User"],
        "summary": "Restore a soft-deleted user",
        "description": "Restores a previously soft-deleted user by clearing their deletedAt field and setting isActive to true. Requires admin permission.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "User ID to restore"
          }
        ],
        "responses": {
          "200": {
            "description": "User restored successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User restored successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User does not have admin permissions"
          },
          "404": {
            "description": "User not found or not deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found or not deleted"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/{id}/profile-picture": {
      "post": {
        "tags": ["User"],
        "summary": "Upload a user profile picture",
        "description": "Uploads and sets a profile picture for a user. Users can upload their own pictures or admins can upload for any user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "User ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Profile picture image file"
                  }
                },
                "required": ["image"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile picture uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Profile picture uploaded successfully"
                    },
                    "profilePicUrl": {
                      "type": "string",
                      "example": "https://cloudinary.com/example/profile_picture.jpg"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "email": {
                          "type": "string",
                          "format": "email"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "profilePic": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - User ID is required or no file uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "No file uploaded"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User does not have required permissions"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "summary": "Delete user profile picture",
        "description": "Removes the profile picture for a user and sets the profilePic field to null. Users can delete their own pictures or admins can delete for any user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Profile picture deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Profile picture deleted successfully"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "email": {
                          "type": "string",
                          "format": "email"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "profilePic": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - User ID is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User ID is required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User does not have required permissions"
          },
          "404": {
            "description": "Profile picture not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Profile picture not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/organization": {
      "post": {
        "tags": ["Organization"],
        "summary": "Create a new organization",
        "description": "Creates a new organization with the current user as owner by default. Generates a join code and sets up the organization structure.",
        "operationId": "createOrganization",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organization created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrganizationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - Organization already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationExistsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/join": {
      "post": {
        "tags": ["Organization"],
        "summary": "Join an organization using join code",
        "description": "Allows a user to join an organization using a valid join code. The user must not already be a member of the organization.",
        "operationId": "joinToOrg",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "joinCode": {
                    "type": "string",
                    "description": "Organization join code",
                    "example": "ABCD-1234"
                  }
                },
                "required": ["joinCode"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully joined organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Successfully joined organization"
                    },
                    "organization": {
                      "$ref": "#/components/schemas/BasicOrganization"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Join code is required"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "You are already a member of this organization"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid join code or organization not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/status": {
      "get": {
        "tags": ["Organization"],
        "summary": "Check user's organization status",
        "description": "Returns information about whether the user belongs to an organization and their role in it. Useful for frontend routing decisions.",
        "operationId": "userOrgStatus",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Organization status retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "hasOrganization": {
                          "type": "boolean",
                          "example": true
                        },
                        "isOwner": {
                          "type": "boolean",
                          "example": true
                        },
                        "organization": {
                          "$ref": "#/components/schemas/BasicOrganization"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "hasOrganization": {
                          "type": "boolean",
                          "example": false
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/resendOTP/{orgId}": {
      "post": {
        "tags": ["Organization"],
        "summary": "Resend OTP verification code",
        "description": "Generates a new OTP code and sends it to the organization's contact email for verification",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organization ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OTP sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Code send successfully. Please check your email"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing organization ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Organization ID is required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Organization not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error or failed to send email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to send verification email. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/verifyOrg/{orgId}": {
      "post": {
        "tags": ["Organization"],
        "summary": "Verify organization using OTP",
        "description": "Verifies an organization's contact email using the provided OTP code",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organization ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["otp"],
                "properties": {
                  "otp": {
                    "type": "string",
                    "description": "Verification OTP code",
                    "example": "123456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization verified successfully or already verified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization verified successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or expired OTP",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired OTP"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/organization/all": {
      "get": {
        "tags": ["Organization"],
        "summary": "Get paginated list of organizations",
        "description": "Returns a paginated list of organizations with filtering, sorting, and permission-based access control.",
        "operationId": "getAllOrganizations",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "required": false,
            "schema": {
              "type": "string",
              "default": "createdAt",
              "enum": ["createdAt", "name", "industry", "sizeRange", "status"]
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order",
            "required": false,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by organization name (contains, case-insensitive)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "industry",
            "in": "query",
            "description": "Filter by industry",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sizeRange",
            "in": "query",
            "description": "Filter by size range",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isVerified",
            "in": "query",
            "description": "Filter by verification status",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Organizations retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "organizations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/OrganizationWithStats"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{organizationId}": {
      "get": {
        "tags": ["Organization"],
        "summary": "Get organization details",
        "description": "Retrieves detailed information about a specific organization including owners, departments, teams, projects, and statistics. Requires organization membership or admin privileges.",
        "operationId": "getSpecificOrganization",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "ID of the organization to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing organization ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - user doesn't have permission",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionError"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationNotFoundError"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{organizationId}/addOwner": {
      "post": {
        "tags": ["Organization"],
        "summary": "Add owners to an organization",
        "description": "Adds one or more users as owners to an organization. Requires admin or existing owner permissions.",
        "operationId": "addOwners",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "ID of the organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "User IDs to add as owners",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["userIds"],
                "properties": {
                  "userIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "description": "Array of user IDs to add as owners",
                    "example": ["123e4567-e89b-12d3-a456-426614174000"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Owners added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully added 2 owner(s) to the organization"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "addedOwners": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UserBasic"
                          }
                        },
                        "skippedOwners": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or invalid user IDs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "invalidUserIds": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{organizationId}/logo/upload": {
      "post": {
        "tags": ["Organization"],
        "summary": "Upload organization logo",
        "description": "Uploads a logo image for the organization. Requires admin or owner permissions.",
        "operationId": "uploadOrganizationLogo",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "ID of the organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Logo image file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logo uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization logo uploaded successfully"
                    },
                    "logoUrl": {
                      "type": "string",
                      "format": "uri"
                    },
                    "organization": {
                      "$ref": "#/components/schemas/OrganizationBasic"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "No file uploaded or missing organization ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{organizationId}/logo/delete": {
      "delete": {
        "tags": ["Organization"],
        "summary": "Delete organization logo",
        "description": "Deletes the organization's logo. Requires admin or owner permissions.",
        "operationId": "deleteOrganizationLogo",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "ID of the organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logo deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization logo deleted successfully"
                    },
                    "organization": {
                      "$ref": "#/components/schemas/OrganizationBasic"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing organization ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization or logo not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{organizationId}/departments/all": {
      "get": {
        "tags": ["Department"],
        "summary": "Get all active departments (paginated)",
        "description": "Returns paginated list of departments for an organization. Accessible to Admin/Owner only.",
        "operationId": "getAllDepartments",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "ID of the organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Departments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Departments retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "departments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DepartmentBasic"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{organizationId}/departments/{departmentId}": {
      "get": {
        "tags": ["Department"],
        "summary": "Get department by ID with related data",
        "description": "Returns detailed department information including users and teams. Accessible to Owner/Admin or department manager.",
        "operationId": "getDepartmentById",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "ID of the organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "departmentId",
            "in": "path",
            "description": "ID of the department",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Department retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Department retrieved successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/DepartmentDetailed"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Department not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{organizationId}/departments/created": {
      "get": {
        "tags": ["Department"],
        "summary": "Get departments managed by current user",
        "description": "Returns paginated list of departments managed by the current user in the specified organization.",
        "operationId": "getCreatedDepartments",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "ID of the organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Managed departments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Managed departments retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "departments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DepartmentWithCounts"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{organizationId}/departments/create": {
      "post": {
        "tags": ["Department"],
        "summary": "Create a new department",
        "description": "Creates a department within the specified organization. Requires Admin or Owner permissions.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "description": { "type": "string" }
                },
                "required": ["name"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Department created successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "403": {
            "description": "Unauthorized action"
          },
          "409": {
            "description": "Duplicate department name"
          }
        }
      }
    },
    "/api/organizations/{organizationId}/departments/{departmentId}/": {
      "put": {
        "tags": ["Department"],
        "summary": "Update department details",
        "description": "Updates a department’s name or description. Requires Admin or Owner permissions.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "departmentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "description": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Department updated successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Department or organization not found"
          },
          "409": {
            "description": "Duplicate department name"
          }
        }
      }
    },
    "/api/organizations/{organizationId}/departments/{departmentId}/delete": {
      "delete": {
        "tags": ["Department"],
        "summary": "Soft delete department",
        "description": "Soft deletes a department by setting deletedAt timestamp. Requires Admin or Owner permissions.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "departmentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Department deleted successfully"
          },
          "404": {
            "description": "Department or organization not found"
          }
        }
      }
    },
    "/api/organizations/{organizationId}/departments/{departmentId}/restore": {
      "patch": {
        "tags": ["Department"],
        "summary": "Restore department",
        "description": "Restores a soft-deleted department. Requires Admin or Owner permissions.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "departmentId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Department restored successfully"
          },
          "404": {
            "description": "Department or organization not found"
          }
        }
      }
    },
    "/api/organization/{organizationId}/team": {
      "post": {
        "tags": ["Team"],
        "summary": "Create a new team in a specific organization",
        "description": "Creates a new team within an organization. Admin or organization owner access required.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeam"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Team created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamCreatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin or organization owner access required"
          },
          "404": {
            "description": "Organization not found"
          },
          "409": {
            "description": "Conflict - Team with this name already exists"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/addMember": {
      "post": {
        "tags": ["Team"],
        "summary": "Add new team members",
        "description": "Adds one or more members to an existing team. Admin or organization owner access required.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTeamMembers"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Members added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamMembersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin or organization owner access required"
          },
          "404": {
            "description": "Organization or team not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}": {
      "put": {
        "tags": ["Team"],
        "summary": "Update a team",
        "description": "Updates team information. Admin or organization owner access required.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeam"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Team updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamBasic"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin or organization owner access required"
          },
          "404": {
            "description": "Organization or team not found"
          },
          "409": {
            "description": "Conflict - Team with this name already exists"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": ["Team"],
        "summary": "Delete team",
        "description": "Soft deletes a team. Admin, organization owner or team creator access required.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Team deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin, organization owner or team creator access required"
          },
          "404": {
            "description": "Organization or team not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/avatar/upload": {
      "post": {
        "tags": ["Team"],
        "summary": "Upload team avatar",
        "description": "Uploads an avatar image for a team. Admin or organization owner access required.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file to upload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Team avatar uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Team avatar uploaded successfully"
                    },
                    "team": {
                      "$ref": "#/components/schemas/TeamBasic"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - No file uploaded"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin or organization owner access required"
          },
          "404": {
            "description": "Organization or team not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/avatar/delete": {
      "delete": {
        "tags": ["Team"],
        "summary": "Delete team avatar",
        "description": "Deletes a team's avatar. Admin or organization owner access required.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team avatar deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Team avatar deleted successfully"
                    },
                    "team": {
                      "$ref": "#/components/schemas/TeamBasic"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin or organization owner access required"
          },
          "404": {
            "description": "Organization, team or avatar not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/members/{memberId}": {
      "delete": {
        "tags": ["Team"],
        "summary": "Remove member from a team",
        "description": "Removes a member from a team (soft delete). Admin, organization owner or team creator access required.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "description": "Team member ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team member removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Team member John Doe removed successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "removedMember": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "userId": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "removedAt": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "team": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Cannot remove the only team leader"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin, organization owner or team creator access required"
          },
          "404": {
            "description": "Organization, team or member not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/teams/all": {
      "get": {
        "tags": ["Team"],
        "summary": "Get all teams",
        "description": "Retrieves all teams in an organization with pagination. Admin or organization owner access required.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term for team name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Teams retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamsPaginatedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin or organization owner access required"
          },
          "404": {
            "description": "Organization not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/teams/{teamId}": {
      "get": {
        "tags": ["Team"],
        "summary": "Get specific team details",
        "description": "Retrieves detailed information about a specific team. Admin, organization owner or team member access required.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamFullResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin, organization owner or team member access required"
          },
          "404": {
            "description": "Organization or team not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project": {
      "post": {
        "tags": ["Project"],
        "summary": "Create a new project",
        "description": "Creates a new project within a team. Requires appropriate permissions.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Validation failed"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Not found - Organization or team not found"
          },
          "409": {
            "description": "Conflict - Project with this name already exists"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/{projectId}": {
      "put": {
        "tags": ["Project"],
        "summary": "Update a project",
        "description": "Updates an existing project. Requires appropriate permissions (admin, organization owner, team manager, or project owner).",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectUpdatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Validation failed"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Not found - Organization, team or project not found"
          },
          "409": {
            "description": "Conflict - Project with this name already exists"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/{projectId}/status": {
      "patch": {
        "tags": ["Project"],
        "summary": "Update project status",
        "description": "Updates the status of an existing project. Requires appropriate permissions (admin, organization owner, team manager, or project owner/manager).",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["status"],
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "New project status",
                    "enum": [
                      "PLANNING",
                      "ACTIVE",
                      "ON_HOLD",
                      "COMPLETED",
                      "CANCELED"
                    ],
                    "example": "ACTIVE"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Project status updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/ProjectBasic"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid status or missing status field",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Status is required or must be one of: PLANNING, ACTIVE, ON_HOLD, COMPLETED, CANCELED"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "You do not have permission to update this project's status"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Organization, team or project not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Project not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/{projectId}/priority": {
      "patch": {
        "tags": ["Project"],
        "summary": "Update project priority",
        "description": "Updates the priority of an existing project. Requires appropriate permissions (admin, organization owner, team manager, or project owner/manager).",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["priority"],
                "properties": {
                  "priority": {
                    "type": "string",
                    "description": "New project priority",
                    "enum": ["LOW", "MEDIUM", "HIGH", "URGENT"],
                    "example": "HIGH"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project priority updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Project priority updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/ProjectBasic"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid priority or missing priority field",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "You do not have permission to update this project's priority"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Organization, team or project not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Project not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/{projectId}/delete": {
      "delete": {
        "tags": ["Project"],
        "summary": "Delete a project",
        "description": "Soft deletes a project. Requires admin, organization owner, or team manager permissions.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Project deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing or invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization ID is required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "You don't have permission to delete projects from this team"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Organization, team or project not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/{projectId}/addMember": {
      "post": {
        "tags": ["Project"],
        "summary": "Add members to a project",
        "description": "Adds one or more members to an existing project. Requires admin, organization owner, or team manager permissions.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["members"],
                "properties": {
                  "members": {
                    "type": "array",
                    "description": "Array of members to add",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": ["userId"],
                      "properties": {
                        "userId": {
                          "type": "string",
                          "description": "ID of the user to add"
                        },
                        "role": {
                          "type": "string",
                          "description": "Role to assign to the member",
                          "enum": [
                            "MEMBER",
                            "CONTRIBUTOR",
                            "REVIEWER",
                            "MANAGER"
                          ],
                          "default": "MEMBER"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Members added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully added 3 members to the project"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer",
                          "description": "Number of members added",
                          "example": 3
                        },
                        "skipped": {
                          "type": "integer",
                          "description": "Number of users already members",
                          "example": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "You don't have permission to add members to this project"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Organization, team, project or some users not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "userIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "IDs of users that were not found",
                      "example": ["user123", "user456"]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/{projectId}/removeMember": {
      "delete": {
        "tags": ["Project"],
        "summary": "Remove a member from a project",
        "description": "Removes a member from a project (soft delete). Requires admin, organization owner, or team manager permissions.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["userId"],
                "properties": {
                  "userId": {
                    "type": "string",
                    "description": "ID of the user to remove from the project"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Member removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Member removed from project successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing or invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User ID is required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "You don't have permission to remove members from this project"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Organization, team, project or user not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/{projectId}/restore": {
      "patch": {
        "tags": ["Project"],
        "summary": "Restore a deleted project",
        "description": "Restores a previously soft-deleted project. Requires admin, organization owner, or team manager permissions.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project restored successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Project restored successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing or invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization ID is required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "You don't have permission to restore projects"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Organization, team or project not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/all": {
      "get": {
        "tags": ["Project"],
        "summary": "Get all projects for a team",
        "description": "Retrieves all projects for a specific team. Regular users only see projects they're members of, while admins/owners/managers see all projects.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Projects retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProjectWithMemberCount"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing or invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization ID is required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "You don't have permission to view these projects"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Organization or team not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization or team not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/{projectId}/": {
      "get": {
        "tags": ["Project"],
        "summary": "Get a specific project with details",
        "description": "Retrieves detailed information about a specific project including members and tasks. Users must be project members or have team permissions to view.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/ProjectDetails"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing or invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Project ID is required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User doesn't have permission to view this project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "You do not have permission to view this project"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Organization, team or project not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Project not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/projects": {
      "get": {
        "tags": ["Project"],
        "summary": "Get projects in a specific organization",
        "description": "Retrieves paginated list of projects in an organization with filtering options. Includes active and archived projects (if user has permission). Can optionally include tasks for each project.",
        "operationId": "getProjectsInSpecificOrg",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "ID of the organization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "query",
            "required": false,
            "description": "Filter projects by team ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamName",
            "in": "query",
            "required": false,
            "description": "Filter projects by team name (case-insensitive contains)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "description": "Filter projects by status",
            "schema": {
              "type": "string",
              "enum": ["ACTIVE", "ON_HOLD", "COMPLETED", "CANCELLED"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Number of items per page (default: 10)",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "includeTasks",
            "in": "query",
            "required": false,
            "description": "Include tasks for each project (default: true)",
            "schema": {
              "type": "string",
              "enum": ["true", "false"],
              "default": "true"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Projects retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Organization's projects retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "activeProjects": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "startDate": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "endDate": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "priority": {
                                "type": "string",
                                "enum": ["LOW", "MEDIUM", "HIGH", "CRITICAL"],
                                "description": "Project priority level"
                              },
                              "progress": {
                                "type": "integer",
                                "description": "Completion percentage (0-100)"
                              },
                              "budget": {
                                "type": "number",
                                "description": "Project budget amount"
                              },
                              "team": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  }
                                }
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "updatedAt": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "memberCount": {
                                "type": "integer"
                              },
                              "members": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "userId": {
                                      "type": "string"
                                    },
                                    "role": {
                                      "type": "string"
                                    },
                                    "firstName": {
                                      "type": "string"
                                    },
                                    "lastName": {
                                      "type": "string"
                                    },
                                    "profilePic": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "hasMoreMembers": {
                                "type": "boolean"
                              },
                              "userRole": {
                                "type": "string",
                                "nullable": true
                              },
                              "taskStats": {
                                "type": "object",
                                "properties": {
                                  "total": {
                                    "type": "integer"
                                  },
                                  "notStarted": {
                                    "type": "integer"
                                  },
                                  "inProgress": {
                                    "type": "integer"
                                  },
                                  "completed": {
                                    "type": "integer"
                                  },
                                  "overdue": {
                                    "type": "integer"
                                  }
                                }
                              },
                              "tasks": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "title": {
                                      "type": "string"
                                    },
                                    "description": {
                                      "type": "string"
                                    },
                                    "priority": {
                                      "type": "string"
                                    },
                                    "status": {
                                      "type": "string"
                                    },
                                    "dueDate": {
                                      "type": "string",
                                      "format": "date-time"
                                    },
                                    "estimatedTime": {
                                      "type": "number"
                                    },
                                    "actualTime": {
                                      "type": "number"
                                    },
                                    "labels": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "subtaskCount": {
                                      "type": "integer"
                                    },
                                    "commentCount": {
                                      "type": "integer"
                                    },
                                    "attachmentCount": {
                                      "type": "integer"
                                    },
                                    "assignee": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        },
                                        "firstName": {
                                          "type": "string"
                                        },
                                        "lastName": {
                                          "type": "string"
                                        },
                                        "profilePic": {
                                          "type": "string"
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "isOverdue": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              },
                              "hasMoreTasks": {
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "archivedProjects": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "startDate": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "endDate": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "deletedAt": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "priority": {
                                "type": "string"
                              },
                              "progress": {
                                "type": "integer"
                              },
                              "team": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  }
                                }
                              },
                              "taskCount": {
                                "type": "integer"
                              },
                              "memberCount": {
                                "type": "integer"
                              }
                            }
                          }
                        },
                        "statistics": {
                          "type": "object",
                          "properties": {
                            "totalActiveProjects": {
                              "type": "integer"
                            },
                            "totalArchivedProjects": {
                              "type": "integer"
                            },
                            "totalProjects": {
                              "type": "integer"
                            }
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "integer"
                            },
                            "limit": {
                              "type": "integer"
                            },
                            "totalPages": {
                              "type": "integer"
                            },
                            "totalItems": {
                              "type": "integer"
                            },
                            "hasNextPage": {
                              "type": "boolean"
                            },
                            "hasPrevPage": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing organization ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Organization ID is required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User doesn't have permission",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "You do not have permission to view this organization"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Organization or team not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "example": false
                        },
                        "message": {
                          "type": "string",
                          "example": "Organization not found"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "example": false
                        },
                        "message": {
                          "type": "string",
                          "example": "Team not found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/{projectId}/task/create": {
      "post": {
        "tags": ["Task"],
        "summary": "Create a new task",
        "description": "Create a new task in a specific project within a team and organization.",
        "operationId": "createTask",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title", "priority", "dueDate"],
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Design login page"
                  },
                  "description": {
                    "type": "string",
                    "example": "Create a modern and user-friendly login page UI"
                  },
                  "priority": {
                    "type": "string",
                    "example": "HIGH"
                  },
                  "sprintId": {
                    "type": "string",
                    "example": "sprint_456"
                  },
                  "assignedTo": {
                    "type": "string",
                    "example": "user_123"
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date",
                    "example": "2025-04-30"
                  },
                  "estimatedTime": {
                    "type": "integer",
                    "example": 8
                  },
                  "parentId": {
                    "type": "string",
                    "example": "parent_task_789"
                  },
                  "labels": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": ["frontend", "urgent"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Task created successfully"
                    },
                    "task": {
                      "$ref": "#/components/schemas/Task"
                    },
                    "project_members": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProjectMember"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/{projectId}/task/{taskId}": {
      "put": {
        "tags": ["Task"],
        "summary": "Update a task",
        "description": "Updates an existing task within a specific project, team, and organization. Requires appropriate permissions. Automatically logs activity for changes like assignment, status updates, and sprint changes.",
        "operationId": "updateTask",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "ID of the organization containing the task",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "description": "ID of the team containing the task",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "ID of the project containing the task",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "description": "ID of the task to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Task update payload (all fields optional - only included fields will be updated)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaskRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTaskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ValidationErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/CircularDependencyError"
                    },
                    {
                      "$ref": "#/components/schemas/SelfParentError"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/OrganizationNotFoundError"
                    },
                    {
                      "$ref": "#/components/schemas/TeamNotFoundError"
                    },
                    {
                      "$ref": "#/components/schemas/ProjectNotFoundError"
                    },
                    {
                      "$ref": "#/components/schemas/TaskNotFoundError"
                    },
                    {
                      "$ref": "#/components/schemas/SprintNotFoundError"
                    },
                    {
                      "$ref": "#/components/schemas/ParentTaskNotFoundError"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/{projectId}/task/{taskId}/priority": {
      "patch": {
        "tags": ["Task"],
        "summary": "Update task priority",
        "description": "Updates the priority of an existing task within a specific project, team, and organization. Requires appropriate permissions.",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "ID of the organization",
            "schema": { "type": "string" }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "description": "ID of the team",
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "ID of the project",
            "schema": { "type": "string" }
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "description": "ID of the task to update",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["priority"],
                "properties": {
                  "priority": {
                    "type": "string",
                    "enum": ["HIGH", "MEDIUM", "LOW"],
                    "description": "New priority level for the task",
                    "example": "MEDIUM"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task priority updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Task priority updated successfully"
                    },
                    "task": { "$ref": "#/components/schemas/Task" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid priority value",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Valid priority (HIGH, MEDIUM, LOW) is required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "You don't have permission to update task priorities in this project"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - organization, team, project or task not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Organization not found"
                        },
                        { "type": "string", "example": "Team not found" },
                        { "type": "string", "example": "Project not found" },
                        {
                          "type": "string",
                          "example": "Task not found or does not belong to the specified project"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/{projectId}/task/{taskId}/status": {
      "patch": {
        "tags": ["Task"],
        "summary": "Update task status",
        "description": "Updates the status of an existing task within a specific project, team, and organization. Requires appropriate permissions.",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "ID of the organization",
            "schema": { "type": "string" }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "description": "ID of the team",
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "ID of the project",
            "schema": { "type": "string" }
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "description": "ID of the task to update",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["status"],
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": ["TODO", "IN_PROGRESS", "IN_REVIEW", "DONE"],
                    "description": "New status for the task",
                    "example": "IN_PROGRESS"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Task status updated successfully"
                    },
                    "task": { "$ref": "#/components/schemas/Task" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Valid status (TODO, IN_PROGRESS, IN_REVIEW, DONE) is required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "You don't have permission to update task status in this project"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - organization, team, project or task not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Organization not found"
                        },
                        { "type": "string", "example": "Team not found" },
                        { "type": "string", "example": "Project not found" },
                        {
                          "type": "string",
                          "example": "Task not found or does not belong to the specified project"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/{projectId}/task/all": {
      "get": {
        "tags": ["Task"],
        "summary": "Get all tasks",
        "description": "Retrieves all tasks for a specific project with filtering, sorting, and pagination capabilities.",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "ID of the organization",
            "schema": { "type": "string" }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "description": "ID of the team",
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "ID of the project",
            "schema": { "type": "string" }
          },
          {
            "name": "sprintId",
            "in": "query",
            "description": "Filter by sprint ID (use 'null' for tasks not in any sprint)",
            "schema": { "type": "string" }
          },
          {
            "name": "priority",
            "in": "query",
            "description": "Filter by priority (HIGH, MEDIUM, LOW, CRITICAL)",
            "schema": { "type": "string" }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status (TODO, IN_PROGRESS, IN_REVIEW, DONE)",
            "schema": { "type": "string" }
          },
          {
            "name": "assignedTo",
            "in": "query",
            "description": "Filter by assignee ID (use 'null' for unassigned tasks)",
            "schema": { "type": "string" }
          },
          {
            "name": "parentId",
            "in": "query",
            "description": "Filter by parent task ID (use 'null' for root tasks)",
            "schema": { "type": "string" }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term to filter by task title or description",
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": { "type": "integer", "default": 1 }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page (default: 20)",
            "schema": { "type": "integer", "default": 20 }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by (default: createdAt)",
            "schema": { "type": "string", "default": "createdAt" }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order (asc or desc, default: desc)",
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": ["asc", "desc"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "tasks": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "title": { "type": "string" },
                          "description": { "type": "string" },
                          "priority": { "type": "string" },
                          "status": { "type": "string" },
                          "projectId": { "type": "string" },
                          "sprintId": { "type": "string" },
                          "createdBy": { "type": "string" },
                          "assignedTo": { "type": "string" },
                          "dueDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "estimatedTime": { "type": "number" },
                          "parentId": { "type": "string" },
                          "labels": {
                            "type": "array",
                            "items": { "type": "string" }
                          },
                          "order": { "type": "number" },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updatedAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "creator": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "firstName": { "type": "string" },
                              "lastName": { "type": "string" },
                              "email": { "type": "string" },
                              "profilePic": { "type": "string" }
                            }
                          },
                          "assignee": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "firstName": { "type": "string" },
                              "lastName": { "type": "string" },
                              "email": { "type": "string" },
                              "profilePic": { "type": "string" }
                            }
                          },
                          "sprint": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "name": { "type": "string" },
                              "status": { "type": "string" }
                            }
                          },
                          "subtasks": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": { "type": "string" },
                                "title": { "type": "string" },
                                "status": { "type": "string" },
                                "priority": { "type": "string" }
                              }
                            }
                          },
                          "parent": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "title": { "type": "string" },
                              "status": { "type": "string" }
                            }
                          },
                          "_count": {
                            "type": "object",
                            "properties": {
                              "comments": { "type": "integer" },
                              "attachments": { "type": "integer" }
                            }
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "total": { "type": "integer", "example": 100 },
                        "page": { "type": "integer", "example": 1 },
                        "limit": { "type": "integer", "example": 20 },
                        "pages": { "type": "integer", "example": 5 }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - organization, team or project not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Organization not found"
                        },
                        { "type": "string", "example": "Team not found" },
                        { "type": "string", "example": "Project not found" }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/{projectId}/task/{taskId}/": {
      "get": {
        "tags": ["Task"],
        "summary": "Get a specific task",
        "description": "Retrieves detailed information about a specific task including related entities like creator, assignee, subtasks, dependencies, comments, and attachments.",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "ID of the organization",
            "schema": { "type": "string" }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "description": "ID of the team",
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "ID of the project",
            "schema": { "type": "string" }
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "description": "ID of the task to retrieve",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Task details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "task": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "title": { "type": "string" },
                        "description": { "type": "string" },
                        "priority": { "type": "string" },
                        "status": { "type": "string" },
                        "projectId": { "type": "string" },
                        "sprintId": { "type": "string" },
                        "createdBy": { "type": "string" },
                        "assignedTo": { "type": "string" },
                        "dueDate": { "type": "string", "format": "date-time" },
                        "estimatedTime": { "type": "number" },
                        "parentId": { "type": "string" },
                        "labels": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "order": { "type": "number" },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "creator": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "firstName": { "type": "string" },
                            "lastName": { "type": "string" },
                            "email": { "type": "string" },
                            "profilePic": { "type": "string" }
                          }
                        },
                        "modifier": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "firstName": { "type": "string" },
                            "lastName": { "type": "string" },
                            "email": { "type": "string" },
                            "profilePic": { "type": "string" }
                          }
                        },
                        "assignee": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "firstName": { "type": "string" },
                            "lastName": { "type": "string" },
                            "email": { "type": "string" },
                            "profilePic": { "type": "string" }
                          }
                        },
                        "sprint": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "name": { "type": "string" },
                            "status": { "type": "string" },
                            "startDate": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "endDate": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "subtasks": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "title": { "type": "string" },
                              "status": { "type": "string" },
                              "priority": { "type": "string" },
                              "assignedTo": { "type": "string" },
                              "dueDate": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "assignee": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "string" },
                                  "firstName": { "type": "string" },
                                  "lastName": { "type": "string" },
                                  "email": { "type": "string" }
                                }
                              }
                            }
                          }
                        },
                        "parent": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "title": { "type": "string" },
                            "status": { "type": "string" },
                            "priority": { "type": "string" }
                          }
                        },
                        "dependentOn": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "task": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "string" },
                                  "title": { "type": "string" },
                                  "status": { "type": "string" }
                                }
                              }
                            }
                          }
                        },
                        "dependencies": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "dependentTask": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "string" },
                                  "title": { "type": "string" },
                                  "status": { "type": "string" }
                                }
                              }
                            }
                          }
                        },
                        "comments": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "content": { "type": "string" },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "user": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "string" },
                                  "firstName": { "type": "string" },
                                  "lastName": { "type": "string" },
                                  "profilePic": { "type": "string" }
                                }
                              }
                            }
                          }
                        },
                        "attachments": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "name": { "type": "string" },
                              "url": { "type": "string" },
                              "size": { "type": "number" },
                              "type": { "type": "string" },
                              "uploadedAt": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "uploader": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "string" },
                                  "firstName": { "type": "string" },
                                  "lastName": { "type": "string" },
                                  "profilePic": { "type": "string" }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - organization, team, project or task not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Organization not found"
                        },
                        { "type": "string", "example": "Team not found" },
                        { "type": "string", "example": "Project not found" },
                        {
                          "type": "string",
                          "example": "Task not found or does not belong to the specified project"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/{projectId}/task/{taskId}/delete": {
      "delete": {
        "tags": ["Task"],
        "summary": "Delete a task",
        "description": "Deletes a task either permanently (for admins) or via soft delete. Handles subtasks recursively.",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "ID of the organization",
            "schema": { "type": "string" }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "description": "ID of the team",
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "ID of the project",
            "schema": { "type": "string" }
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "description": "ID of the task to delete",
            "schema": { "type": "string" }
          },
          {
            "name": "permanent",
            "in": "query",
            "description": "Whether to permanently delete (true) or soft delete (false). Requires admin privileges.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Task permanently deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "You don't have permission to delete tasks in this project"
                        },
                        {
                          "type": "string",
                          "example": "Only administrators or organization owners can permanently delete tasks"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - organization, team, project or task not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Organization not found"
                        },
                        { "type": "string", "example": "Team not found" },
                        { "type": "string", "example": "Project not found" },
                        {
                          "type": "string",
                          "example": "Task not found or does not belong to the specified project"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/{projectId}/task/{taskId}/restore": {
      "patch": {
        "tags": ["Task"],
        "summary": "Restore a deleted task",
        "description": "Restores a soft-deleted task and optionally its subtasks. Requires the parent task to be active if the task has one.",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "ID of the organization",
            "schema": { "type": "string" }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "description": "ID of the team",
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "ID of the project",
            "schema": { "type": "string" }
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "description": "ID of the task to restore",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "restoreSubtasks": {
                    "type": "boolean",
                    "description": "Whether to restore all deleted subtasks (default: true)",
                    "default": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task restored successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Task restored successfully with its subtasks"
                    },
                    "task": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "title": { "type": "string" },
                        "description": { "type": "string" },
                        "priority": { "type": "string" },
                        "status": { "type": "string" },
                        "projectId": { "type": "string" },
                        "sprintId": { "type": "string" },
                        "createdBy": { "type": "string" },
                        "assignedTo": { "type": "string" },
                        "dueDate": { "type": "string", "format": "date-time" },
                        "estimatedTime": { "type": "number" },
                        "parentId": { "type": "string" },
                        "labels": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "order": { "type": "number" },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "deletedAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "creator": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "firstName": { "type": "string" },
                            "lastName": { "type": "string" },
                            "profilePic": { "type": "string" }
                          }
                        },
                        "_count": {
                          "type": "object",
                          "properties": {
                            "subtasks": { "type": "number" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - parent task is deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Cannot restore task because its parent task is deleted. Please restore the parent task first."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "You don't have permission to restore tasks in this project"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - organization, team, project or task not found or already active",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Task not found, already active, or does not belong to the specified project"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{organizationId}/tasks": {
      "get": {
        "tags": ["Task"],
        "summary": "Get tasks in a specific organization",
        "description": "Retrieves paginated list of tasks in an organization with filtering options. Includes subtasks if requested.",
        "operationId": "getTasksInSpecificOrg",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "ID of the organization",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "required": false,
            "description": "Filter tasks by project ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectName",
            "in": "query",
            "required": false,
            "description": "Filter tasks by project name (case-insensitive contains)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assignedTo",
            "in": "query",
            "required": false,
            "description": "Filter tasks by assignee. Use 'me' for current user or 'unassigned' for unassigned tasks",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "description": "Filter tasks by status",
            "schema": {
              "type": "string",
              "enum": ["TODO", "IN_PROGRESS", "REVIEW", "DONE"]
            }
          },
          {
            "name": "priority",
            "in": "query",
            "required": false,
            "description": "Filter tasks by priority",
            "schema": {
              "type": "string",
              "enum": ["LOW", "MEDIUM", "HIGH"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number for pagination (default: 1)",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Number of items per page (default: 10)",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "includeSubtasks",
            "in": "query",
            "required": false,
            "description": "Include subtasks for each task (default: true)",
            "schema": {
              "type": "string",
              "enum": ["true", "false"],
              "default": "true"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Organization's tasks retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tasks": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "title": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "priority": {
                                "type": "string",
                                "enum": ["LOW", "MEDIUM", "HIGH"]
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "TODO",
                                  "IN_PROGRESS",
                                  "REVIEW",
                                  "DONE"
                                ]
                              },
                              "dueDate": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "updatedAt": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "estimatedTime": {
                                "type": "number",
                                "description": "Estimated time in hours"
                              },
                              "actualTime": {
                                "type": "number",
                                "description": "Actual time spent in hours"
                              },
                              "timeRemaining": {
                                "type": "number",
                                "description": "Remaining time in hours"
                              },
                              "timeProgress": {
                                "type": "number",
                                "description": "Time progress percentage (0-100)"
                              },
                              "labels": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "project": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "status": {
                                    "type": "string"
                                  }
                                }
                              },
                              "creator": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "firstName": {
                                    "type": "string"
                                  },
                                  "lastName": {
                                    "type": "string"
                                  },
                                  "profilePic": {
                                    "type": "string"
                                  }
                                }
                              },
                              "assignee": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "firstName": {
                                    "type": "string"
                                  },
                                  "lastName": {
                                    "type": "string"
                                  },
                                  "profilePic": {
                                    "type": "string"
                                  }
                                },
                                "nullable": true
                              },
                              "commentCount": {
                                "type": "integer"
                              },
                              "attachmentCount": {
                                "type": "integer"
                              },
                              "timelogCount": {
                                "type": "integer"
                              },
                              "isOverdue": {
                                "type": "boolean"
                              },
                              "progress": {
                                "type": "integer",
                                "description": "Completion percentage (0-100)"
                              },
                              "subtaskStats": {
                                "type": "object",
                                "properties": {
                                  "total": {
                                    "type": "integer"
                                  },
                                  "completed": {
                                    "type": "integer"
                                  },
                                  "inProgress": {
                                    "type": "integer"
                                  },
                                  "notStarted": {
                                    "type": "integer"
                                  },
                                  "overdue": {
                                    "type": "integer"
                                  }
                                }
                              },
                              "subtasks": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "title": {
                                      "type": "string"
                                    },
                                    "description": {
                                      "type": "string"
                                    },
                                    "priority": {
                                      "type": "string"
                                    },
                                    "status": {
                                      "type": "string"
                                    },
                                    "dueDate": {
                                      "type": "string",
                                      "format": "date-time"
                                    },
                                    "estimatedTime": {
                                      "type": "number"
                                    },
                                    "actualTime": {
                                      "type": "number"
                                    },
                                    "labels": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "commentCount": {
                                      "type": "integer"
                                    },
                                    "attachmentCount": {
                                      "type": "integer"
                                    },
                                    "assignee": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        },
                                        "firstName": {
                                          "type": "string"
                                        },
                                        "lastName": {
                                          "type": "string"
                                        },
                                        "profilePic": {
                                          "type": "string"
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "isOverdue": {
                                      "type": "boolean"
                                    }
                                  }
                                }
                              },
                              "hasMoreSubtasks": {
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "statistics": {
                          "type": "object",
                          "properties": {
                            "totalTasks": {
                              "type": "integer"
                            },
                            "byStatus": {
                              "type": "object",
                              "properties": {
                                "todo": {
                                  "type": "integer"
                                },
                                "inProgress": {
                                  "type": "integer"
                                },
                                "review": {
                                  "type": "integer"
                                },
                                "done": {
                                  "type": "integer"
                                }
                              }
                            },
                            "byPriority": {
                              "type": "object",
                              "properties": {
                                "low": {
                                  "type": "integer"
                                },
                                "medium": {
                                  "type": "integer"
                                },
                                "high": {
                                  "type": "integer"
                                }
                              }
                            },
                            "overdue": {
                              "type": "integer"
                            }
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "page": {
                              "type": "integer"
                            },
                            "limit": {
                              "type": "integer"
                            },
                            "totalPages": {
                              "type": "integer"
                            },
                            "totalItems": {
                              "type": "integer"
                            },
                            "hasNextPage": {
                              "type": "boolean"
                            },
                            "hasPrevPage": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing organization ID or invalid filter values",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Organization ID is required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User doesn't have permission",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "You do not have permission to view this organization"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Organization or project not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "example": false
                        },
                        "message": {
                          "type": "string",
                          "example": "Organization not found"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "example": false
                        },
                        "message": {
                          "type": "string",
                          "example": "Project not found"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{organizationId}/activity-logs": {
      "get": {
        "tags": ["Activity Logs"],
        "summary": "Get activity logs with filtering",
        "description": "Retrieves activity logs with various filtering, sorting, and pagination options. Requires 'view activity logs' permission.",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "ID of the organization",
            "schema": { "type": "string" }
          },
          {
            "name": "entityType",
            "in": "query",
            "description": "Filter by entity type (ORGANIZATION, DEPARTMENT, TEAM, PROJECT, SPRINT, TASK)",
            "schema": { "type": "string" }
          },
          {
            "name": "action",
            "in": "query",
            "description": "Filter by action type (CREATE, UPDATE, DELETE, etc.)",
            "schema": { "type": "string" }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Filter by user ID who performed the action",
            "schema": { "type": "string" }
          },
          {
            "name": "departmentId",
            "in": "query",
            "description": "Filter by department ID",
            "schema": { "type": "string" }
          },
          {
            "name": "teamId",
            "in": "query",
            "description": "Filter by team ID",
            "schema": { "type": "string" }
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "Filter by project ID",
            "schema": { "type": "string" }
          },
          {
            "name": "sprintId",
            "in": "query",
            "description": "Filter by sprint ID",
            "schema": { "type": "string" }
          },
          {
            "name": "taskId",
            "in": "query",
            "description": "Filter by task ID",
            "schema": { "type": "string" }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Filter logs after this date (YYYY-MM-DD or ISO format)",
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Filter logs before this date (YYYY-MM-DD or ISO format)",
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination (default: 1)",
            "schema": { "type": "integer", "default": 1 }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items per page (default: 50)",
            "schema": { "type": "integer", "default": 50 }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by (createdAt, entityType, action) (default: createdAt)",
            "schema": { "type": "string", "default": "createdAt" }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order (asc or desc) (default: desc)",
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": ["asc", "desc"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Activity logs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "count": { "type": "integer", "example": 25 },
                    "total": { "type": "integer", "example": 125 },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "currentPage": { "type": "integer", "example": 1 },
                        "totalPages": { "type": "integer", "example": 5 },
                        "hasNextPage": { "type": "boolean", "example": true },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": false
                        },
                        "limit": { "type": "integer", "example": 25 }
                      }
                    },
                    "activityLogs": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "entityType": { "type": "string" },
                          "entityId": { "type": "string" },
                          "action": { "type": "string" },
                          "oldValue": { "type": "object" },
                          "newValue": { "type": "object" },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "user": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "firstName": { "type": "string" },
                              "lastName": { "type": "string" },
                              "email": { "type": "string" },
                              "profilePic": { "type": "string" }
                            }
                          },
                          "organization": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "name": { "type": "string" }
                            }
                          },
                          "department": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "name": { "type": "string" }
                            }
                          },
                          "team": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "name": { "type": "string" }
                            }
                          },
                          "project": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "name": { "type": "string" }
                            }
                          },
                          "sprint": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "name": { "type": "string" }
                            }
                          },
                          "task": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "title": { "type": "string" }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "You do not have permission to view activity logs"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Organization not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{organizationId}/activity-logs/{logId}": {
      "get": {
        "tags": ["Activity Logs"],
        "summary": "Get a specific activity log by ID",
        "description": "Retrieves detailed information about a specific activity log. Requires 'view activity logs' permission.",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "ID of the organization",
            "schema": { "type": "string" }
          },
          {
            "name": "logId",
            "in": "path",
            "required": true,
            "description": "ID of the activity log to retrieve",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Activity log retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "activityLog": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "entityType": { "type": "string" },
                        "entityId": { "type": "string" },
                        "action": { "type": "string" },
                        "oldValue": { "type": "object" },
                        "newValue": { "type": "object" },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "firstName": { "type": "string" },
                            "lastName": { "type": "string" },
                            "email": { "type": "string" },
                            "profilePic": { "type": "string" }
                          }
                        },
                        "organization": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "name": { "type": "string" }
                          }
                        },
                        "department": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "name": { "type": "string" }
                          }
                        },
                        "team": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "name": { "type": "string" }
                          }
                        },
                        "project": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "name": { "type": "string" }
                          }
                        },
                        "sprint": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "name": { "type": "string" }
                          }
                        },
                        "task": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "title": { "type": "string" },
                            "description": { "type": "string" },
                            "status": { "type": "string" },
                            "priority": { "type": "string" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "You do not have permission to view activity logs"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - organization or activity log not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": "Organization not found"
                        },
                        {
                          "type": "string",
                          "example": "Activity log not found"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{organizationId}/activity-feed": {
      "get": {
        "tags": ["Activity Logs"],
        "summary": "Get activity feed for an entity",
        "description": "Retrieves a paginated activity feed for a specific entity (task, project, etc.) with cursor-based pagination.",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "ID of the organization",
            "schema": { "type": "string" }
          },
          {
            "name": "entityType",
            "in": "query",
            "description": "Type of entity to filter by (ORGANIZATION, DEPARTMENT, TEAM, PROJECT, SPRINT, TASK, USER)",
            "schema": {
              "type": "string",
              "enum": [
                "ORGANIZATION",
                "DEPARTMENT",
                "TEAM",
                "PROJECT",
                "SPRINT",
                "TASK",
                "USER"
              ]
            }
          },
          {
            "name": "entityId",
            "in": "query",
            "description": "ID of the entity to filter by (required if entityType is provided)",
            "schema": { "type": "string" }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Number of items to return (default: 20)",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Cursor for pagination (ISO timestamp of the last item from previous request)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Activity feed retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "activityFeed": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "message": { "type": "string" },
                          "user": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "firstName": { "type": "string" },
                              "lastName": { "type": "string" },
                              "profilePic": { "type": "string" }
                            }
                          },
                          "entityType": { "type": "string" },
                          "action": { "type": "string" },
                          "details": { "type": "object" },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "entityData": { "type": "object" }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "nextCursor": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp to use for next page pagination"
                        },
                        "hasMore": {
                          "type": "boolean",
                          "description": "Whether there are more items available"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "oneOf": [
                        { "type": "string", "example": "Invalid entity type" },
                        {
                          "type": "string",
                          "example": "entityId is required when entityType is provided"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Organization not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/chat": {
      "post": {
        "tags": ["Chat"],
        "summary": "Create a new chat room",
        "description": "Creates a new chat room associated with a specific entity (organization, department, team, etc.) and adds the creator as an admin participant.",
        "operationId": "createChatRoom",
        "security": [{ "BearerAuth": [] }],
        "requestBody": {
          "description": "Chat room creation data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["type", "entityType", "entityId"],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the chat room (defaults to '[EntityType] Chat' if not provided)",
                    "example": "Engineering Team Chat"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the chat room",
                    "example": "Chat for the engineering team members"
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of chat room",
                    "enum": ["PUBLIC", "PRIVATE"],
                    "example": "PUBLIC"
                  },
                  "entityType": {
                    "type": "string",
                    "description": "Type of entity this chat is associated with",
                    "enum": ["ORGANIZATION", "DEPARTMENT", "TEAM", "PROJECT"],
                    "example": "TEAM"
                  },
                  "entityId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "ID of the associated entity",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Chat room created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatRoom"
                }
              }
            }
          },
          "404": {
            "description": "Associated entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "TEAM not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Chat room already exists for this entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Chat room already exists for this TEAM"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Failed to create chat room"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error details"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },

  "components": {
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "refreshToken",
        "description": "Refresh token cookie for authentication"
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": ["MEMBER", "ADMIN", "SUPER_ADMIN"],
            "default": "MEMBER"
          },
          "isActive": {
            "type": "boolean",
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateOrganizationRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the organization",
            "example": "Acme Corp"
          },
          "description": {
            "type": "string",
            "description": "Description of the organization",
            "example": "A leading provider of innovative solutions",
            "nullable": true
          },
          "industry": {
            "type": "string",
            "description": "Industry sector",
            "example": "Technology",
            "nullable": true
          },
          "sizeRange": {
            "type": "string",
            "description": "Size range of the organization",
            "example": "51-200",
            "nullable": true
          },
          "website": {
            "type": "string",
            "description": "Organization website URL",
            "example": "https://acme.com",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "description": "URL of the organization logo",
            "example": "https://acme.com/logo.png",
            "nullable": true
          },
          "address": {
            "type": "string",
            "description": "Physical address",
            "example": "123 Main St, Anytown, USA",
            "nullable": true
          },
          "contactEmail": {
            "type": "string",
            "format": "email",
            "description": "Contact email address",
            "example": "contact@acme.com"
          },
          "contactPhone": {
            "type": "string",
            "description": "Contact phone number",
            "example": "+1 555-123-4567",
            "nullable": true
          },
          "orgOwnerId": {
            "type": "string",
            "description": "Optional - ID of user to set as owner (defaults to current user)",
            "example": "cln3k7vxp0000v2k0q2q3k4k5",
            "nullable": true
          }
        },
        "required": ["name", "contactEmail"]
      },
      "CreateOrganizationResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Organization created successfully"
          },
          "data": {
            "type": "object",
            "properties": {
              "organization": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string",
                    "enum": ["PENDING", "APPROVED", "REJECTED", "SUSPENDED"],
                    "example": "APPROVED"
                  },
                  "isVerified": {
                    "type": "boolean",
                    "example": true
                  },
                  "joinCode": {
                    "type": "string",
                    "description": "Unique join code for the organization",
                    "example": "ABCD-1234"
                  }
                }
              },
              "organizationOwner": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "\"name\" is required"
          }
        }
      },
      "OrganizationExistsError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Organization with this name or email already exists"
          }
        }
      },
      "OrganizationWithStats": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "industry": {
            "type": "string"
          },
          "sizeRange": {
            "type": "array",
            "enum": ["1-10", "11-50", "51-200", "201-500", "501-1000", "1001+"]
          },
          "website": {
            "type": "string"
          },
          "logoUrl": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "isVerified": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "statistics": {
            "type": "object",
            "properties": {
              "usersCount": {
                "type": "integer"
              },
              "departmentsCount": {
                "type": "integer"
              },
              "teamsCount": {
                "type": "integer"
              },
              "projectsCount": {
                "type": "integer"
              }
            }
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string",
                  "format": "email"
                }
              }
            }
          }
        }
      },
      "BasicOrganization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Organization ID"
          },
          "name": {
            "type": "string",
            "description": "Organization name"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the organization was created"
          },
          "createdBy": {
            "type": "string",
            "description": "ID of the user who created the organization"
          },
          "industry": {
            "type": "string",
            "description": "Industry the organization belongs to",
            "nullable": true
          },
          "sizeRange": {
            "type": "string",
            "description": "Size range of the organization",
            "nullable": true
          },
          "logoUrl": {
            "type": "string",
            "description": "URL of the organization's logo",
            "nullable": true
          }
        }
      },
      "OrganizationDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "industry": {
            "type": "string"
          },
          "sizeRange": {
            "type": "array",
            "enum": ["1-10", "11-50", "51-200", "201-500", "501-1000", "1001+"]
          },
          "website": {
            "type": "string"
          },
          "logoUrl": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "isVerified": {
            "type": "boolean"
          },
          "contactEmail": {
            "type": "string",
            "format": "email"
          },
          "contactPhone": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "statistics": {
            "type": "object",
            "properties": {
              "usersCount": {
                "type": "integer"
              },
              "departmentsCount": {
                "type": "integer"
              },
              "teamsCount": {
                "type": "integer"
              },
              "projectsCount": {
                "type": "integer"
              },
              "templatesCount": {
                "type": "integer"
              }
            }
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string",
                  "format": "email"
                },
                "profileImage": {
                  "type": "string"
                }
              }
            }
          },
          "departments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "usersCount": {
                  "type": "integer"
                },
                "teamsCount": {
                  "type": "integer"
                }
              }
            }
          },
          "teams": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "usersCount": {
                  "type": "integer"
                },
                "projectsCount": {
                  "type": "integer"
                }
              }
            }
          },
          "projects": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "startDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "endDate": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "hasMoreDepartments": {
            "type": "boolean"
          },
          "hasMoreTeams": {
            "type": "boolean"
          },
          "hasMoreProjects": {
            "type": "boolean"
          }
        }
      },
      "OrganizationDetailsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Organization retrieved successfully"
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Organization ID"
              },
              "name": {
                "type": "string",
                "description": "Organization name"
              },
              "description": {
                "type": "string",
                "nullable": true
              },
              "industry": {
                "type": "string",
                "nullable": true
              },
              "sizeRange": {
                "type": "string",
                "nullable": true
              },
              "website": {
                "type": "string",
                "nullable": true
              },
              "logoUrl": {
                "type": "string",
                "nullable": true
              },
              "address": {
                "type": "string",
                "nullable": true
              },
              "contactEmail": {
                "type": "string",
                "format": "email",
                "nullable": true
              },
              "contactPhone": {
                "type": "string",
                "nullable": true
              },
              "status": {
                "type": "string",
                "enum": ["PENDING", "APPROVED", "REJECTED", "SUSPENDED"]
              },
              "joinCode": {
                "type": "string"
              },
              "isVerified": {
                "type": "boolean"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "statistics": {
                "type": "object",
                "properties": {
                  "usersCount": {
                    "type": "integer"
                  },
                  "departmentsCount": {
                    "type": "integer"
                  },
                  "teamsCount": {
                    "type": "integer"
                  },
                  "projectsCount": {
                    "type": "integer"
                  },
                  "templatesCount": {
                    "type": "integer"
                  }
                }
              },
              "owners": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string",
                      "format": "email"
                    },
                    "profileImage": {
                      "type": "string",
                      "nullable": true
                    }
                  }
                }
              },
              "departments": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string",
                      "nullable": true
                    },
                    "_count": {
                      "type": "object",
                      "properties": {
                        "teams": {
                          "type": "integer"
                        },
                        "users": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              },
              "teams": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string",
                      "nullable": true
                    },
                    "usersCount": {
                      "type": "integer"
                    },
                    "projectsCount": {
                      "type": "integer"
                    }
                  }
                }
              },
              "projects": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string",
                      "nullable": true
                    },
                    "status": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date-time",
                      "nullable": true
                    }
                  }
                }
              },
              "users": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string",
                      "format": "email"
                    },
                    "profilePic": {
                      "type": "string",
                      "nullable": true
                    },
                    "jobTitle": {
                      "type": "string",
                      "nullable": true
                    },
                    "role": {
                      "type": "string"
                    },
                    "isOwner": {
                      "type": "boolean"
                    },
                    "department": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    }
                  }
                }
              },
              "hasMoreDepartments": {
                "type": "boolean",
                "description": "Indicates if there are more departments than returned"
              },
              "hasMoreTeams": {
                "type": "boolean",
                "description": "Indicates if there are more teams than returned"
              },
              "hasMoreProjects": {
                "type": "boolean",
                "description": "Indicates if there are more projects than returned"
              }
            }
          }
        }
      },
      "BadRequestError": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "Organization ID is required"
          }
        }
      },
      "PermissionError": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "You do not have permission to view this organization"
          }
        }
      },
      "OrganizationUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "maxLength": 500
          },
          "industry": {
            "type": "string",
            "maxLength": 50
          },
          "sizeRange": {
            "type": "array",
            "enum": ["1-10", "11-50", "51-200", "201-500", "501-1000", "1001+"]
          },
          "website": {
            "type": "string",
            "format": "uri",
            "maxLength": 100
          },
          "logoUrl": {
            "type": "string",
            "format": "uri",
            "maxLength": 255
          },
          "contactEmail": {
            "type": "string",
            "format": "email",
            "maxLength": 100
          },
          "contactPhone": {
            "type": "string",
            "maxLength": 20
          },
          "address": {
            "type": "string",
            "maxLength": 255
          },
          "isVerified": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "enum": ["ACTIVE", "PENDING", "SUSPENDED"]
          }
        }
      },
      "OrganizationBasic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "industry": {
            "type": "string"
          },
          "sizeRange": {
            "type": "array",
            "enum": ["1-10", "11-50", "51-200", "201-500", "501-1000", "1001+"]
          },
          "website": {
            "type": "string"
          },
          "logoUrl": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "isVerified": {
            "type": "boolean"
          },
          "contactEmail": {
            "type": "string",
            "format": "email"
          },
          "contactPhone": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "page": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "pages": {
            "type": "integer"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "Error message"
          }
        }
      },
      "UserBasic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Combined first and last name"
          },
          "email": {
            "type": "string",
            "format": "email"
          }
        }
      },
      "DepartmentBasic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "organization": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "manager": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              }
            }
          }
        }
      },
      "DepartmentDetailed": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "organization": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "manager": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "email": {
                "type": "string",
                "format": "email"
              },
              "jobTitle": {
                "type": "string"
              }
            }
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBasic"
            }
          },
          "teams": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "DepartmentWithCounts": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "organization": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "_count": {
            "type": "object",
            "properties": {
              "users": {
                "type": "integer"
              },
              "teams": {
                "type": "integer"
              }
            }
          }
        }
      },
      "TeamBasic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "avatar": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateTeam": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 500
          },
          "avatar": {
            "type": "string",
            "nullable": true
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamMemberInput"
            }
          }
        }
      },
      "TeamMemberInput": {
        "type": "object",
        "required": ["userId"],
        "properties": {
          "userId": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": ["MEMBER", "LEADER"],
            "default": "MEMBER"
          }
        }
      },
      "TeamCreatedResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Team created successfully."
          },
          "data": {
            "type": "object",
            "properties": {
              "team": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "teamLeader": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "leader": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "teamId": {
                        "type": "string"
                      },
                      "userId": {
                        "type": "string"
                      },
                      "role": {
                        "type": "string"
                      },
                      "isActive": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "teamMembers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "profilePic": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "AddTeamMembers": {
        "type": "object",
        "required": ["members"],
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamMemberInput"
            }
          }
        }
      },
      "TeamMembersResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Members added successfully."
          },
          "data": {
            "type": "object",
            "properties": {
              "team": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "teamLeader": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  }
                }
              },
              "teamMembers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "profilePic": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "UpdateTeam": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "nullable": true
          },
          "description": {
            "type": "string",
            "maxLength": 500,
            "nullable": true
          },
          "avatar": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TeamsPaginatedResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "object",
            "properties": {
              "teams": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TeamWithMembers"
                }
              },
              "pagination": {
                "type": "object",
                "properties": {
                  "page": {
                    "type": "integer",
                    "example": 1
                  },
                  "limit": {
                    "type": "integer",
                    "example": 10
                  },
                  "totalItems": {
                    "type": "integer",
                    "example": 25
                  },
                  "totalPages": {
                    "type": "integer",
                    "example": 3
                  }
                }
              }
            }
          }
        }
      },
      "TeamWithMembers": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TeamBasic"
          },
          {
            "type": "object",
            "properties": {
              "members": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    },
                    "isActive": {
                      "type": "boolean"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "profilePic": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    }
                  }
                }
              },
              "creator": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "profilePic": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          }
        ]
      },
      "TeamFullResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "object",
            "properties": {
              "team": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "avatar": {
                    "type": "string",
                    "nullable": true
                  },
                  "createdBy": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updatedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "creator": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "firstName": {
                        "type": "string"
                      },
                      "lastName": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "profilePic": {
                        "type": "string",
                        "nullable": true
                      }
                    }
                  },
                  "department": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "nullable": true
                  }
                }
              },
              "members": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "profilePic": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    },
                    "joinedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              },
              "projects": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "recentReports": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "statistics": {
                "type": "object",
                "properties": {
                  "activeMembers": {
                    "type": "integer"
                  },
                  "totalProjects": {
                    "type": "integer"
                  },
                  "projectsInProgress": {
                    "type": "integer"
                  },
                  "completedProjects": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      },
      "CreateProject": {
        "type": "object",
        "required": ["name", "startDate", "endDate"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Project name",
            "minLength": 3,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "description": "Project description",
            "nullable": true,
            "maxLength": 1000
          },
          "status": {
            "type": "string",
            "description": "Project status",
            "enum": [
              "PLANNING",
              "IN_PROGRESS",
              "ON_HOLD",
              "COMPLETED",
              "CANCELLED"
            ],
            "default": "PLANNING"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Project start date"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "Project end date"
          },
          "priority": {
            "type": "string",
            "description": "Project priority",
            "enum": ["LOW", "MEDIUM", "HIGH", "CRITICAL"],
            "default": "MEDIUM"
          },
          "budget": {
            "type": "number",
            "description": "Project budget",
            "nullable": true,
            "minimum": 0
          },
          "members": {
            "type": "array",
            "description": "Initial project members",
            "items": {
              "$ref": "#/components/schemas/ProjectMemberInput"
            },
            "default": []
          }
        }
      },
      "ProjectMemberInput": {
        "type": "object",
        "required": ["userId"],
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID to add as project member"
          },
          "role": {
            "type": "string",
            "description": "Member role",
            "enum": ["MEMBER", "CONTRIBUTOR", "REVIEWER", "MANAGER"],
            "default": "MEMBER"
          }
        }
      },
      "ProjectCreatedResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Project created successfully."
          },
          "data": {
            "type": "object",
            "properties": {
              "project": {
                "$ref": "#/components/schemas/ProjectBasic"
              },
              "projectOwner": {
                "$ref": "#/components/schemas/ProjectMember"
              },
              "members": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectMember"
                }
              }
            }
          }
        }
      },
      "ProjectBasic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "priority": {
            "type": "string"
          },
          "budget": {
            "type": "number",
            "nullable": true
          },
          "teamId": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "progress": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100
          },
          "createdBy": {
            "type": "string"
          },
          "lastModifiedBy": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProjectMember": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "UpdateProject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Project name",
            "minLength": 3,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "description": "Project description",
            "nullable": true,
            "maxLength": 1000
          },
          "status": {
            "type": "string",
            "description": "Project status",
            "enum": [
              "PLANNING",
              "IN_PROGRESS",
              "ON_HOLD",
              "COMPLETED",
              "CANCELLED"
            ]
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Project start date"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "Project end date"
          },
          "priority": {
            "type": "string",
            "description": "Project priority",
            "enum": ["LOW", "MEDIUM", "HIGH", "CRITICAL"]
          },
          "budget": {
            "type": "number",
            "description": "Project budget",
            "nullable": true,
            "minimum": 0
          },
          "progress": {
            "type": "integer",
            "description": "Project progress percentage",
            "minimum": 0,
            "maximum": 100
          }
        }
      },
      "ProjectUpdatedResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Project updated successfully"
          },
          "data": {
            "$ref": "#/components/schemas/ProjectBasic"
          }
        }
      },
      "ProjectWithMemberCount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": [
              "PLANNING",
              "IN_PROGRESS",
              "ON_HOLD",
              "COMPLETED",
              "CANCELLED"
            ]
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "priority": {
            "type": "string",
            "enum": ["LOW", "MEDIUM", "HIGH", "URGENT"]
          },
          "budget": {
            "type": "number",
            "nullable": true
          },
          "teamId": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "progress": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "memberCount": {
            "type": "integer",
            "description": "Number of active members in the project"
          },
          "userRole": {
            "type": "string",
            "description": "Current user's role in the project (only for non-admin users)",
            "nullable": true,
            "enum": [
              "MEMBER",
              "CONTRIBUTOR",
              "REVIEWER",
              "MANAGER",
              "PROJECT_OWNER"
            ]
          }
        }
      },
      "ProjectDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": [
              "PLANNING",
              "IN_PROGRESS",
              "ON_HOLD",
              "COMPLETED",
              "CANCELLED"
            ]
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "priority": {
            "type": "string",
            "enum": ["LOW", "MEDIUM", "HIGH", "URGENT"]
          },
          "budget": {
            "type": "number",
            "nullable": true
          },
          "teamId": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "progress": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectMember"
            }
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectTask"
            }
          },
          "memberCount": {
            "type": "integer"
          },
          "taskCount": {
            "type": "integer"
          },
          "userRole": {
            "type": "string",
            "nullable": true,
            "enum": [
              "MEMBER",
              "CONTRIBUTOR",
              "REVIEWER",
              "MANAGER",
              "PROJECT_OWNER"
            ]
          }
        }
      },
      "ProjectTask": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "Task": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "example": "task_123" },
          "title": { "type": "string" },
          "description": { "type": "string" },
          "priority": { "type": "string" },
          "status": { "type": "string", "example": "TODO" },
          "projectId": { "type": "string" },
          "sprintId": { "type": "string" },
          "createdBy": { "type": "string" },
          "assignedTo": { "type": "string" },
          "dueDate": { "type": "string", "format": "date" },
          "estimatedTime": { "type": "integer" },
          "parentId": { "type": "string" },
          "order": { "type": "integer" },
          "labels": {
            "type": "array",
            "items": { "type": "string" }
          },
          "lastModifiedBy": { "type": "string" }
        }
      },
      "UpdateTaskRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Updated title of the task",
            "example": "Implement user authentication"
          },
          "description": {
            "type": "string",
            "description": "Updated description of the task",
            "example": "Implement JWT based authentication for the API"
          },
          "status": {
            "type": "string",
            "enum": ["TODO", "IN_PROGRESS", "REVIEW", "DONE"],
            "description": "Updated status of the task",
            "example": "IN_PROGRESS"
          },
          "priority": {
            "type": "string",
            "enum": ["LOW", "MEDIUM", "HIGH", "CRITICAL"],
            "description": "Updated priority of the task",
            "example": "HIGH"
          },
          "sprintId": {
            "type": "string",
            "description": "ID of the sprint to move this task to",
            "example": "cln3k7vxp0000v2k0q2q3k4k5"
          },
          "assignedTo": {
            "type": "string",
            "nullable": true,
            "description": "ID of user to assign this task to (set to null to unassign)",
            "example": "cln3k7vxp0000v2k0q2q3k4k5"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "description": "Updated due date for the task",
            "example": "2024-01-15T23:59:59Z"
          },
          "estimatedTime": {
            "type": "number",
            "description": "Updated estimated time to complete (in hours)",
            "example": 8
          },
          "parentId": {
            "type": "string",
            "nullable": true,
            "description": "ID of parent task (set to null to make this a top-level task)",
            "example": "cln3k7vxp0000v2k0q2q3k4k5"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Updated labels for the task",
            "example": ["backend", "authentication"]
          }
        }
      },
      "UpdateTaskResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Task updated successfully"
          },
          "task": {
            "$ref": "#/components/schemas/Task"
          }
        }
      },
      "ValidationErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "\"priority\" must be one of [LOW, MEDIUM, HIGH, CRITICAL]"
          }
        }
      },
      "CircularDependencyError": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "Circular dependency detected in task hierarchy"
          }
        }
      },
      "SelfParentError": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "A task cannot be its own parent"
          }
        }
      },
      "PermissionErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "You don't have permission to update tasks in this project"
          }
        }
      },
      "OrganizationNotFoundError": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "Organization not found"
          }
        }
      },
      "TeamNotFoundError": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "Team not found"
          }
        }
      },
      "ProjectNotFoundError": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "Project not found"
          }
        }
      },
      "TaskNotFoundError": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "Task not found or does not belong to the specified project"
          }
        }
      },
      "SprintNotFoundError": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "Sprint not found or does not belong to the specified project"
          }
        }
      },
      "ParentTaskNotFoundError": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "Parent task not found or does not belong to the specified project"
          }
        }
      },
      "InternalServerError": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "Internal server error"
          }
        }
      },
      "ChatRoom": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["PUBLIC", "PRIVATE"]
          },
          "entityType": {
            "type": "string",
            "enum": ["ORGANIZATION", "DEPARTMENT", "TEAM", "PROJECT"]
          },
          "entityId": {
            "type": "string",
            "format": "uuid"
          },
          "lastMessageAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  }
}
