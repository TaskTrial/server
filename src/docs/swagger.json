{
  "openapi": "3.0.0",
  "info": {
    "title": "TaskTrial APIs",
    "version": "1.0.0",
    "description": "Project Management App",
    "contact": {
      "email": "tasktrial27@gmail.com"
    },
    "license": {
      "name": "MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local development server"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "User",
      "description": "User management"
    },
    {
      "name": "Organization",
      "description": "Organization management"
    },
    {
      "name": "Department",
      "description": "Department management"
    },
    {
      "name": "Team",
      "description": "Team management"
    },
    {
      "name": "Project",
      "description": "Project management"
    }
  ],
  "paths": {
    "/api/auth/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "Register a new user",
        "description": "Creates a new user account and sends verification OTP to email",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "password123"
                  },
                  "firstName": {
                    "type": "string",
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Doe"
                  },
                  "username": {
                    "type": "string",
                    "example": "johndoe"
                  }
                },
                "required": [
                  "email",
                  "password",
                  "firstName",
                  "lastName",
                  "username"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User created. Please verify your email."
                    },
                    "userId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or user already exists"
          }
        }
      }
    },
    "/api/auth/resendOTP": {
      "post": {
        "tags": ["Auth"],
        "summary": "Resend OTP code",
        "description": "Resend OTP code if it expired",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP resent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Code sent successfully. Please check your email"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid email"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/auth/verifyEmail": {
      "post": {
        "tags": ["Auth"],
        "summary": "Verify email address",
        "description": "Verify user's email address using the OTP sent to their email",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "otp": {
                    "type": "string",
                    "example": "123456"
                  }
                },
                "required": ["email", "otp"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email verified successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired OTP"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/auth/signin": {
      "post": {
        "tags": ["Auth"],
        "summary": "Authenticate user",
        "description": "Authenticate user and return JWT tokens",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  }
                },
                "required": ["email", "password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User login successfully"
                    },
                    "accessToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "refreshToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "email": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "role": {
                          "type": "string",
                          "enum": ["MEMBER", "ADMIN", "SUPER_ADMIN"]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "403": {
            "description": "Account not activated"
          }
        }
      }
    },
    "/api/auth/forgotPassword": {
      "post": {
        "tags": ["Auth"],
        "summary": "Request password reset",
        "description": "Initiate password reset process by sending OTP to user's email",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset OTP sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password reset OTP sent"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error"
          }
        }
      }
    },
    "/api/auth/resetPassword": {
      "post": {
        "tags": ["Auth"],
        "summary": "Reset password",
        "description": "Reset user password using the OTP received via email",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "otp": {
                    "type": "string",
                    "example": "123456"
                  },
                  "newPassword": {
                    "type": "string",
                    "minLength": 6,
                    "example": "newpassword123"
                  }
                },
                "required": ["email", "otp", "newPassword"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password reset successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired OTP"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/auth/forgotPasswordWithoutEmail": {
      "post": {
        "tags": ["Auth"],
        "summary": "Request password reset without email",
        "description": "Initiate password reset using refreshToken to identify user",
        "responses": {
          "200": {
            "description": "Password reset OTP sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password reset OTP sent"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No token provided or invalid token"
          }
        }
      }
    },
    "/api/auth/resetPasswordWithoutEmail": {
      "post": {
        "tags": ["Auth"],
        "summary": "Reset password without email",
        "description": "Reset user password using the OTP received via email (authenticated via refresh token)",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "otp": {
                    "type": "string",
                    "example": "123456"
                  },
                  "newPassword": {
                    "type": "string",
                    "minLength": 6,
                    "example": "newpassword123"
                  }
                },
                "required": ["otp", "newPassword"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password reset successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired OTP"
          },
          "401": {
            "description": "No token provided or invalid token"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/auth/refreshAccessToken": {
      "post": {
        "tags": ["Auth"],
        "summary": "Refresh access token",
        "description": "Generate new access token using refresh token",
        "responses": {
          "200": {
            "description": "New access token generated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Refresh token missing"
          },
          "403": {
            "description": "Invalid refresh token"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Log out user",
        "description": "Log out user by invalidating their refresh token",
        "responses": {
          "200": {
            "description": "Logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Logged out successfully"
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No content (no token provided)"
          }
        }
      }
    },
    "/api/organizations/{organizationId}/departments/all": {
      "get": {
        "tags": ["Department"],
        "summary": "Get all active departments (paginated) for an organization",
        "description": "Returns a paginated list of all active departments in the specified organization. Accessible by organization owners and admins only.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the organization"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "Departments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "departments": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "name": { "type": "string" },
                              "description": { "type": "string" },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "updatedAt": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "organization": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "string" },
                                  "name": { "type": "string" }
                                }
                              },
                              "manager": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "string" },
                                  "firstName": { "type": "string" },
                                  "lastName": { "type": "string" }
                                }
                              }
                            }
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "page": { "type": "integer" },
                            "limit": { "type": "integer" },
                            "totalItems": { "type": "integer" },
                            "totalPages": { "type": "integer" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Organization not found"
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/api/organizations/{organizationId}/departments/{departmentId}": {
      "get": {
        "tags": ["Department"],
        "summary": "Get department by ID with related data",
        "description": "Returns department details including users and teams. Accessible by organization owners, admins, or the department manager.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the organization"
          },
          {
            "name": "departmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the department"
          }
        ],
        "responses": {
          "200": {
            "description": "Department retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "name": { "type": "string" },
                        "description": { "type": "string" },
                        "organization": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "name": { "type": "string" }
                          }
                        },
                        "manager": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "firstName": { "type": "string" },
                            "lastName": { "type": "string" },
                            "email": { "type": "string" },
                            "jobTitle": { "type": "string" }
                          }
                        },
                        "users": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "firstName": { "type": "string" },
                              "lastName": { "type": "string" },
                              "email": { "type": "string" },
                              "jobTitle": { "type": "string" }
                            }
                          }
                        },
                        "teams": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "name": { "type": "string" },
                              "description": { "type": "string" }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Department not found"
          }
        },
        "security": [{ "bearerAuth": [] }]
      },
      "put": {
        "tags": ["Department"],
        "summary": "Update department details",
        "description": "Updates department information. Accessible by organization owners and admins only.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the organization"
          },
          {
            "name": "departmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the department to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "description": { "type": "string" }
                },
                "required": ["name"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Department updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "name": { "type": "string" },
                        "description": { "type": "string" },
                        "organization": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "name": { "type": "string" }
                          }
                        },
                        "manager": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "firstName": { "type": "string" },
                            "lastName": { "type": "string" },
                            "email": { "type": "string" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input data"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Department not found"
          },
          "409": {
            "description": "Conflict - department name already exists"
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/api/organizations/{organizationId}/departments/created": {
      "get": {
        "tags": ["Department"],
        "summary": "Get departments managed by current user",
        "description": "Returns a paginated list of departments managed by the current user in the specified organization.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the organization"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Managed departments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "departments": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": { "type": "string" },
                              "name": { "type": "string" },
                              "description": { "type": "string" },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "updatedAt": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "organization": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "string" },
                                  "name": { "type": "string" }
                                }
                              },
                              "_count": {
                                "type": "object",
                                "properties": {
                                  "users": { "type": "integer" },
                                  "teams": { "type": "integer" }
                                }
                              }
                            }
                          }
                        },
                        "pagination": {
                          "type": "object",
                          "properties": {
                            "page": { "type": "integer" },
                            "limit": { "type": "integer" },
                            "totalItems": { "type": "integer" },
                            "totalPages": { "type": "integer" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization not found"
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/api/organizations/{organizationId}/departments/create": {
      "post": {
        "tags": ["Department"],
        "summary": "Create a new department",
        "description": "Creates a new department in the specified organization. Accessible by organization owners and admins only.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the organization"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": { "type": "string" },
                  "description": { "type": "string" }
                },
                "required": ["name"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Department created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "name": { "type": "string" },
                        "description": { "type": "string" },
                        "organization": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "name": { "type": "string" }
                          }
                        },
                        "manager": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "firstName": { "type": "string" },
                            "lastName": { "type": "string" },
                            "email": { "type": "string" }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input data"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Organization not found"
          },
          "409": {
            "description": "Conflict - department name already exists"
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/api/organizations/{organizationId}/departments/{departmentId}/delete": {
      "delete": {
        "tags": ["Department"],
        "summary": "Soft delete a department",
        "description": "Marks a department as deleted by setting its deletedAt field. Accessible by organization owners and admins only.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the organization"
          },
          {
            "name": "departmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the department to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Department deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - department already deleted"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Department not found"
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/api/organizations/{organizationId}/departments/{departmentId}/restore": {
      "patch": {
        "tags": ["Department"],
        "summary": "Restore a soft-deleted department",
        "description": "Restores a previously deleted department by setting its deletedAt field to null. Accessible by organization owners and admins only.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the organization"
          },
          {
            "name": "departmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the department to restore"
          }
        ],
        "responses": {
          "200": {
            "description": "Department restored successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "message": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - department not deleted"
          },
          "403": {
            "description": "Forbidden - insufficient permissions"
          },
          "404": {
            "description": "Department not found"
          }
        },
        "security": [{ "bearerAuth": [] }]
      }
    },
    "/api/organization": {
      "post": {
        "tags": ["Organization"],
        "summary": "Create a new organization with the current user as owner",
        "description": "Creates a new organization. If created by admin, organization is automatically approved. Otherwise, it requires email verification.",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "contactEmail"],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Organization name",
                    "example": "Acme Inc"
                  },
                  "description": {
                    "type": "string",
                    "description": "Organization description",
                    "example": "A leading tech company"
                  },
                  "industry": {
                    "type": "string",
                    "description": "Industry sector",
                    "example": "Technology"
                  },
                  "sizeRange": {
                    "type": "string",
                    "description": "Size range of the organization",
                    "example": "51-200"
                  },
                  "website": {
                    "type": "string",
                    "description": "Organization website URL",
                    "example": "https://acme.com"
                  },
                  "logoUrl": {
                    "type": "string",
                    "description": "URL to organization logo",
                    "example": "https://acme.com/logo.png"
                  },
                  "address": {
                    "type": "string",
                    "description": "Physical address",
                    "example": "123 Main St, City, Country"
                  },
                  "contactEmail": {
                    "type": "string",
                    "format": "email",
                    "description": "Contact email for the organization",
                    "example": "contact@acme.com"
                  },
                  "contactPhone": {
                    "type": "string",
                    "description": "Contact phone number",
                    "example": "+1234567890"
                  },
                  "orgOwnerId": {
                    "type": "string",
                    "description": "Optional user ID to assign as owner (admin only)",
                    "example": "cl1234567890"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organization created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Organization created successfully. Please verify your org"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "organization": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "cl1234567890"
                            },
                            "name": {
                              "type": "string",
                              "example": "Acme Inc"
                            },
                            "status": {
                              "type": "string",
                              "example": "PENDING"
                            },
                            "isVerified": {
                              "type": "boolean",
                              "example": false
                            }
                          }
                        },
                        "organizationOwner": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "cl1234567891"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "\"name\" is required"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Organization with this name or email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization with this name or email already exists"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "object"
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to send verification email. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/resendOTP/{orgId}": {
      "post": {
        "tags": ["Organization"],
        "summary": "Resend OTP code for organization verification",
        "description": "Resends the verification OTP to the organization's contact email if the previous one expired",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "description": "ID of the organization to resend OTP for",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OTP resent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Code sent successfully. Please check your email"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing organization ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Organization ID is required"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Organization not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to send verification email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "object"
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to send verification email. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/verifyOrg/{orgId}": {
      "post": {
        "tags": ["Organization"],
        "summary": "Verify organization's contact email using OTP",
        "description": "Verifies the organization's email address using the OTP sent to the contact email",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "description": "ID of the organization",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["otp"],
                "properties": {
                  "otp": {
                    "type": "string",
                    "description": "The OTP code received via email",
                    "example": "123456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization verified successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired OTP",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired OTP"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/OrganizationNotFound"
          }
        }
      }
    },
    "/api/organization/all": {
      "get": {
        "tags": ["Organization"],
        "summary": "Get paginated list of organizations with filtering and sorting",
        "description": "Returns a paginated list of organizations. Admins see all organizations, others see only organizations they are associated with.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "type": "string",
              "default": "createdAt",
              "enum": ["name", "createdAt", "updatedAt", "status"]
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order",
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by organization name (contains)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "industry",
            "in": "query",
            "description": "Filter by industry",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sizeRange",
            "in": "query",
            "description": "Filter by size range",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isVerified",
            "in": "query",
            "description": "Filter by verification status",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organizations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedOrganizations"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{organizationId}": {
      "get": {
        "tags": ["Organization"],
        "summary": "Get detailed information about a specific organization",
        "description": "Returns detailed information about an organization including owners, departments, teams and projects. Requires admin or membership access.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "responses": {
          "200": {
            "description": "Organization details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDetails"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/MissingOrgId"
          },
          "403": {
            "description": "Forbidden - No permission to view this organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "You do not have permission to view this organization"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/OrganizationNotFound"
          }
        }
      },
      "put": {
        "tags": ["Organization"],
        "summary": "Update organization details",
        "description": "Updates organization information. Admins can update all fields, owners can update most fields except verification status.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganization"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Organization updated successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "cl1234567890"
                        },
                        "name": {
                          "type": "string",
                          "example": "Acme Inc"
                        },
                        "description": {
                          "type": "string",
                          "example": "A leading tech company"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "403": {
            "description": "Forbidden - No permission to update this organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "You do not have permission to update this organization"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/OrganizationNotFound"
          },
          "409": {
            "description": "Conflict - Organization name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Organization with this name already exists"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Organization"],
        "summary": "Soft delete an organization",
        "description": "Marks an organization as deleted (soft delete). Requires admin or owner permissions.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "responses": {
          "200": {
            "description": "Organization deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Organization deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/MissingOrgId"
          },
          "403": {
            "description": "Forbidden - No permission to delete this organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "You do not have permission to delete this organization"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Organization not found or already deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Organization not found or already deleted"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{organizationId}/addOwner": {
      "post": {
        "tags": ["Organization"],
        "summary": "Add one or more users as owners to an organization",
        "description": "Adds users as owners to the organization. Requires admin or existing owner permissions.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["userIds"],
                "properties": {
                  "userIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of user IDs to add as owners",
                    "example": ["cl1234567890", "cl0987654321"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Owners added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddOwnersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or invalid user IDs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "One or more specified users do not exist"
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "invalidUserIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to add owners",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "You do not have permission to add new owners to this organization"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/OrganizationNotFound"
          }
        }
      }
    },
    "/api/organization/{organizationId}/logo/upload": {
      "post": {
        "tags": ["Organization"],
        "summary": "Upload organization logo",
        "description": "Uploads a logo image for the organization. Requires admin or owner permissions.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Logo image file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logo uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization logo uploaded successfully"
                    },
                    "logoUrl": {
                      "type": "string",
                      "example": "https://cloudinary.com/logo123.jpg"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "No file uploaded or invalid organization ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "No file uploaded"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - No permission to upload logo",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "You do not have permission to modify this organization"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/OrganizationNotFound"
          }
        }
      }
    },
    "/api/organization/{organizationId}/logo/delete": {
      "delete": {
        "tags": ["Organization"],
        "summary": "Delete organization logo",
        "description": "Deletes the organization's logo. Requires admin or owner permissions.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "$ref": "#/components/parameters/organizationId"
          }
        ],
        "responses": {
          "200": {
            "description": "Logo deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization logo deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/MissingOrgId"
          },
          "403": {
            "description": "Forbidden - No permission to delete logo",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "You do not have permission to modify this organization"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Logo not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization logo not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/users/all": {
      "get": {
        "tags": ["User"],
        "summary": "Get all users with pagination",
        "description": "Retrieves a paginated list of all users. Admin access required.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Users retrieved successfully"
                    },
                    "currentPage": {
                      "type": "integer",
                      "example": 1
                    },
                    "totalPages": {
                      "type": "integer",
                      "example": 5
                    },
                    "totalUsers": {
                      "type": "integer",
                      "example": 50
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserBasic"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": ["User"],
        "summary": "Get full user profile by ID",
        "description": "Retrieves detailed information about a specific user. User or Admin access required.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User retrieved successfully"
                    },
                    "user": {
                      "$ref": "#/components/schemas/UserFull"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Access denied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": ["User"],
        "summary": "Update user account",
        "description": "Updates user account information. User or Admin access required.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User account updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User account updated successfully"
                    },
                    "user": {
                      "$ref": "#/components/schemas/UserBasic"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Account is not active"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": ["User"],
        "summary": "Soft delete a user",
        "description": "Marks a user as deleted (soft delete). Admin access required.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - User already deleted"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/users/update-password/{id}": {
      "patch": {
        "tags": ["User"],
        "summary": "Update user password",
        "description": "Updates the password for a user. User access required.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password updated successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input or same as old password"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - User access required"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/users/restore/{id}": {
      "patch": {
        "tags": ["User"],
        "summary": "Restore a soft-deleted user",
        "description": "Restores a previously soft-deleted user. Admin access required.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User restored successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User restored successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "User not found or not deleted"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/users/{id}/profile-picture": {
      "post": {
        "tags": ["User"],
        "summary": "Upload a profile picture for a user",
        "description": "Uploads and sets a profile picture for a user. User or Admin access required.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file to upload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile picture uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Profile picture uploaded successfully"
                    },
                    "profilePicUrl": {
                      "type": "string",
                      "example": "https://cloudinary.com/image.jpg"
                    },
                    "user": {
                      "$ref": "#/components/schemas/UserBasic"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - No file uploaded"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Access denied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": ["User"],
        "summary": "Delete user profile picture",
        "description": "Deletes the profile picture of a user. User or Admin access required.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile picture deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Profile picture deleted successfully"
                    },
                    "user": {
                      "$ref": "#/components/schemas/UserBasic"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Access denied"
          },
          "404": {
            "description": "Profile picture not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team": {
      "post": {
        "tags": ["Team"],
        "summary": "Create a new team in a specific organization",
        "description": "Creates a new team within an organization. Admin or organization owner access required.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeam"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Team created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamCreatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin or organization owner access required"
          },
          "404": {
            "description": "Organization not found"
          },
          "409": {
            "description": "Conflict - Team with this name already exists"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/addMember": {
      "post": {
        "tags": ["Team"],
        "summary": "Add new team members",
        "description": "Adds one or more members to an existing team. Admin or organization owner access required.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTeamMembers"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Members added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamMembersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin or organization owner access required"
          },
          "404": {
            "description": "Organization or team not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}": {
      "put": {
        "tags": ["Team"],
        "summary": "Update a team",
        "description": "Updates team information. Admin or organization owner access required.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeam"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Team updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamBasic"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin or organization owner access required"
          },
          "404": {
            "description": "Organization or team not found"
          },
          "409": {
            "description": "Conflict - Team with this name already exists"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": ["Team"],
        "summary": "Delete team",
        "description": "Soft deletes a team. Admin, organization owner or team creator access required.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Team deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin, organization owner or team creator access required"
          },
          "404": {
            "description": "Organization or team not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/avatar/upload": {
      "post": {
        "tags": ["Team"],
        "summary": "Upload team avatar",
        "description": "Uploads an avatar image for a team. Admin or organization owner access required.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file to upload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Team avatar uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Team avatar uploaded successfully"
                    },
                    "team": {
                      "$ref": "#/components/schemas/TeamBasic"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - No file uploaded"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin or organization owner access required"
          },
          "404": {
            "description": "Organization or team not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/avatar/delete": {
      "delete": {
        "tags": ["Team"],
        "summary": "Delete team avatar",
        "description": "Deletes a team's avatar. Admin or organization owner access required.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team avatar deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Team avatar deleted successfully"
                    },
                    "team": {
                      "$ref": "#/components/schemas/TeamBasic"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin or organization owner access required"
          },
          "404": {
            "description": "Organization, team or avatar not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/members/{memberId}": {
      "delete": {
        "tags": ["Team"],
        "summary": "Remove member from a team",
        "description": "Removes a member from a team (soft delete). Admin, organization owner or team creator access required.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "description": "Team member ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team member removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Team member John Doe removed successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "removedMember": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "userId": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "removedAt": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "team": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Cannot remove the only team leader"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin, organization owner or team creator access required"
          },
          "404": {
            "description": "Organization, team or member not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/teams/all": {
      "get": {
        "tags": ["Team"],
        "summary": "Get all teams",
        "description": "Retrieves all teams in an organization with pagination. Admin or organization owner access required.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term for team name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Teams retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamsPaginatedResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin or organization owner access required"
          },
          "404": {
            "description": "Organization not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/teams/{teamId}": {
      "get": {
        "tags": ["Team"],
        "summary": "Get specific team details",
        "description": "Retrieves detailed information about a specific team. Admin, organization owner or team member access required.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamFullResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin, organization owner or team member access required"
          },
          "404": {
            "description": "Organization or team not found"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project": {
      "post": {
        "tags": ["Project"],
        "summary": "Create a new project",
        "description": "Creates a new project within a team. Requires appropriate permissions.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Validation failed"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Not found - Organization or team not found"
          },
          "409": {
            "description": "Conflict - Project with this name already exists"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/{projectId}": {
      "put": {
        "tags": ["Project"],
        "summary": "Update a project",
        "description": "Updates an existing project. Requires appropriate permissions (admin, organization owner, team manager, or project owner).",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectUpdatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Validation failed"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          },
          "404": {
            "description": "Not found - Organization, team or project not found"
          },
          "409": {
            "description": "Conflict - Project with this name already exists"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/{projectId}/status": {
      "patch": {
        "tags": ["Project"],
        "summary": "Update project status",
        "description": "Updates the status of an existing project. Requires appropriate permissions (admin, organization owner, team manager, or project owner/manager).",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["status"],
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "New project status",
                    "enum": [
                      "PLANNING",
                      "ACTIVE",
                      "ON_HOLD",
                      "COMPLETED",
                      "CANCELED"
                    ],
                    "example": "ACTIVE"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Project status updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/ProjectBasic"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid status or missing status field",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Status is required or must be one of: PLANNING, ACTIVE, ON_HOLD, COMPLETED, CANCELED"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "You do not have permission to update this project's status"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Organization, team or project not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Project not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/{projectId}/priority": {
      "patch": {
        "tags": ["Project"],
        "summary": "Update project priority",
        "description": "Updates the priority of an existing project. Requires appropriate permissions (admin, organization owner, team manager, or project owner/manager).",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["priority"],
                "properties": {
                  "priority": {
                    "type": "string",
                    "description": "New project priority",
                    "enum": ["LOW", "MEDIUM", "HIGH", "URGENT"],
                    "example": "HIGH"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project priority updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Project priority updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/ProjectBasic"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid priority or missing priority field",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "You do not have permission to update this project's priority"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Organization, team or project not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Project not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/{projectId}/": {
      "delete": {
        "tags": ["Project"],
        "summary": "Delete a project",
        "description": "Soft deletes a project. Requires admin, organization owner, or team manager permissions.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Project deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing or invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization ID is required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "You don't have permission to delete projects from this team"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Organization, team or project not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/{projectId}/addMember": {
      "post": {
        "tags": ["Project"],
        "summary": "Add members to a project",
        "description": "Adds one or more members to an existing project. Requires admin, organization owner, or team manager permissions.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["members"],
                "properties": {
                  "members": {
                    "type": "array",
                    "description": "Array of members to add",
                    "minItems": 1,
                    "items": {
                      "type": "object",
                      "required": ["userId"],
                      "properties": {
                        "userId": {
                          "type": "string",
                          "description": "ID of the user to add"
                        },
                        "role": {
                          "type": "string",
                          "description": "Role to assign to the member",
                          "enum": [
                            "MEMBER",
                            "CONTRIBUTOR",
                            "REVIEWER",
                            "MANAGER"
                          ],
                          "default": "MEMBER"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Members added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully added 3 members to the project"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer",
                          "description": "Number of members added",
                          "example": 3
                        },
                        "skipped": {
                          "type": "integer",
                          "description": "Number of users already members",
                          "example": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "You don't have permission to add members to this project"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Organization, team, project or some users not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "userIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "IDs of users that were not found",
                      "example": ["user123", "user456"]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/organization/{organizationId}/team/{teamId}/project/{projectId}/removeMember": {
      "delete": {
        "tags": ["project"],
        "summary": "Remove a member from a project",
        "description": "Removes a member from a project (soft delete). Requires admin, organization owner, or team manager permissions.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["userId"],
                "properties": {
                  "userId": {
                    "type": "string",
                    "description": "ID of the user to remove from the project"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Member removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Member removed from project successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Missing or invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User ID is required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "You don't have permission to remove members from this project"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found - Organization, team, project or user not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },

  "components": {
    "parameters": {
      "orgId": {
        "name": "orgId",
        "in": "path",
        "required": true,
        "description": "ID of the organization",
        "schema": {
          "type": "string"
        }
      },
      "organizationId": {
        "name": "organizationId",
        "in": "path",
        "required": true,
        "description": "ID of the organization",
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "MissingOrgId": {
        "description": "Missing organization ID",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Organization ID is required"
                }
              }
            }
          }
        }
      },
      "OrganizationNotFound": {
        "description": "Organization not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Organization not found"
                }
              }
            }
          }
        }
      },
      "ValidationError": {
        "description": "Validation error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": false
                },
                "message": {
                  "type": "string",
                  "example": "Validation error occurred"
                },
                "errors": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },

    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": ["MEMBER", "ADMIN", "SUPER_ADMIN"]
          },
          "isActive": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AddOwnersResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Owners added successfully"
          },
          "addedOwners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "UpdateOrganization": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Organization name"
          },
          "description": {
            "type": "string",
            "description": "Organization description"
          },
          "industry": {
            "type": "string",
            "description": "Industry sector"
          },
          "sizeRange": {
            "type": "string",
            "description": "Size range of the organization"
          },
          "website": {
            "type": "string",
            "description": "Organization website URL"
          },
          "logoUrl": {
            "type": "string",
            "description": "URL to organization logo"
          },
          "address": {
            "type": "string",
            "description": "Physical address"
          },
          "contactEmail": {
            "type": "string",
            "format": "email",
            "description": "Contact email for the organization"
          },
          "contactPhone": {
            "type": "string",
            "description": "Contact phone number"
          }
        }
      },
      "OrganizationDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["ACTIVE", "INACTIVE", "PENDING"]
          },
          "isVerified": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "owners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "departments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "PaginatedOrganizations": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Organizations retrieved successfully"
          },
          "data": {
            "type": "object",
            "properties": {
              "organizations": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": { "type": "string" },
                    "name": { "type": "string" },
                    "status": { "type": "string" },
                    "isVerified": { "type": "boolean" }
                  }
                }
              },
              "pagination": {
                "type": "object",
                "properties": {
                  "page": { "type": "integer" },
                  "limit": { "type": "integer" },
                  "totalItems": { "type": "integer" },
                  "totalPages": { "type": "integer" }
                }
              }
            }
          }
        }
      },
      "UserBasic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": ["USER", "ADMIN", "SUPER_ADMIN"]
          },
          "profilePic": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "timezone": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UserFull": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/UserBasic"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "type": "string"
              },
              "preferences": {
                "type": "object"
              },
              "isActive": {
                "type": "boolean"
              },
              "isOwner": {
                "type": "boolean"
              },
              "lastLogin": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "lastLogout": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "department": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              },
              "organization": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              },
              "permissions": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "entityType": {
                      "type": "string"
                    },
                    "entityId": {
                      "type": "string"
                    },
                    "permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "teamMemberships": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "team": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "activityLogs": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "action": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "UpdateUserAccount": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "timezone": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "enum": ["USER", "ADMIN", "SUPER_ADMIN"],
            "nullable": true,
            "description": "Admin only field"
          },
          "departmentId": {
            "type": "string",
            "nullable": true,
            "description": "Admin only field"
          },
          "organizationId": {
            "type": "string",
            "nullable": true,
            "description": "Admin only field"
          }
        }
      },
      "UpdatePassword": {
        "type": "object",
        "required": ["oldPassword", "newPassword"],
        "properties": {
          "oldPassword": {
            "type": "string",
            "format": "password",
            "minLength": 6
          },
          "newPassword": {
            "type": "string",
            "format": "password",
            "minLength": 6
          }
        }
      },
      "TeamBasic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "avatar": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateTeam": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 500
          },
          "avatar": {
            "type": "string",
            "nullable": true
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamMemberInput"
            }
          }
        }
      },
      "TeamMemberInput": {
        "type": "object",
        "required": ["userId"],
        "properties": {
          "userId": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": ["MEMBER", "LEADER"],
            "default": "MEMBER"
          }
        }
      },
      "TeamCreatedResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Team created successfully."
          },
          "data": {
            "type": "object",
            "properties": {
              "team": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "teamLeader": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "leader": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "teamId": {
                        "type": "string"
                      },
                      "userId": {
                        "type": "string"
                      },
                      "role": {
                        "type": "string"
                      },
                      "isActive": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "teamMembers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "profilePic": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "AddTeamMembers": {
        "type": "object",
        "required": ["members"],
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamMemberInput"
            }
          }
        }
      },
      "TeamMembersResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Members added successfully."
          },
          "data": {
            "type": "object",
            "properties": {
              "team": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "teamLeader": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  }
                }
              },
              "teamMembers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "profilePic": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "UpdateTeam": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "nullable": true
          },
          "description": {
            "type": "string",
            "maxLength": 500,
            "nullable": true
          },
          "avatar": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TeamsPaginatedResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "object",
            "properties": {
              "teams": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TeamWithMembers"
                }
              },
              "pagination": {
                "type": "object",
                "properties": {
                  "page": {
                    "type": "integer",
                    "example": 1
                  },
                  "limit": {
                    "type": "integer",
                    "example": 10
                  },
                  "totalItems": {
                    "type": "integer",
                    "example": 25
                  },
                  "totalPages": {
                    "type": "integer",
                    "example": 3
                  }
                }
              }
            }
          }
        }
      },
      "TeamWithMembers": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TeamBasic"
          },
          {
            "type": "object",
            "properties": {
              "members": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    },
                    "isActive": {
                      "type": "boolean"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "profilePic": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    }
                  }
                }
              },
              "creator": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "profilePic": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          }
        ]
      },
      "TeamFullResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "object",
            "properties": {
              "team": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "avatar": {
                    "type": "string",
                    "nullable": true
                  },
                  "createdBy": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updatedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "creator": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "firstName": {
                        "type": "string"
                      },
                      "lastName": {
                        "type": "string"
                      },
                      "email": {
                        "type": "string"
                      },
                      "profilePic": {
                        "type": "string",
                        "nullable": true
                      }
                    }
                  },
                  "department": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      }
                    },
                    "nullable": true
                  }
                }
              },
              "members": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "profilePic": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    },
                    "joinedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              },
              "projects": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "recentReports": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "statistics": {
                "type": "object",
                "properties": {
                  "activeMembers": {
                    "type": "integer"
                  },
                  "totalProjects": {
                    "type": "integer"
                  },
                  "projectsInProgress": {
                    "type": "integer"
                  },
                  "completedProjects": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      },
      "CreateProject": {
        "type": "object",
        "required": ["name", "startDate", "endDate"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Project name",
            "minLength": 3,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "description": "Project description",
            "nullable": true,
            "maxLength": 1000
          },
          "status": {
            "type": "string",
            "description": "Project status",
            "enum": [
              "PLANNING",
              "IN_PROGRESS",
              "ON_HOLD",
              "COMPLETED",
              "CANCELLED"
            ],
            "default": "PLANNING"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Project start date"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "Project end date"
          },
          "priority": {
            "type": "string",
            "description": "Project priority",
            "enum": ["LOW", "MEDIUM", "HIGH", "CRITICAL"],
            "default": "MEDIUM"
          },
          "budget": {
            "type": "number",
            "description": "Project budget",
            "nullable": true,
            "minimum": 0
          },
          "members": {
            "type": "array",
            "description": "Initial project members",
            "items": {
              "$ref": "#/components/schemas/ProjectMemberInput"
            },
            "default": []
          }
        }
      },
      "ProjectMemberInput": {
        "type": "object",
        "required": ["userId"],
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID to add as project member"
          },
          "role": {
            "type": "string",
            "description": "Member role",
            "enum": ["MEMBER", "CONTRIBUTOR", "REVIEWER", "MANAGER"],
            "default": "MEMBER"
          }
        }
      },
      "ProjectCreatedResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Project created successfully."
          },
          "data": {
            "type": "object",
            "properties": {
              "project": {
                "$ref": "#/components/schemas/ProjectBasic"
              },
              "projectOwner": {
                "$ref": "#/components/schemas/ProjectMember"
              },
              "members": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectMember"
                }
              }
            }
          }
        }
      },
      "ProjectBasic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "priority": {
            "type": "string"
          },
          "budget": {
            "type": "number",
            "nullable": true
          },
          "teamId": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "progress": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100
          },
          "createdBy": {
            "type": "string"
          },
          "lastModifiedBy": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProjectMember": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "UpdateProject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Project name",
            "minLength": 3,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "description": "Project description",
            "nullable": true,
            "maxLength": 1000
          },
          "status": {
            "type": "string",
            "description": "Project status",
            "enum": [
              "PLANNING",
              "IN_PROGRESS",
              "ON_HOLD",
              "COMPLETED",
              "CANCELLED"
            ]
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Project start date"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "Project end date"
          },
          "priority": {
            "type": "string",
            "description": "Project priority",
            "enum": ["LOW", "MEDIUM", "HIGH", "CRITICAL"]
          },
          "budget": {
            "type": "number",
            "description": "Project budget",
            "nullable": true,
            "minimum": 0
          },
          "progress": {
            "type": "integer",
            "description": "Project progress percentage",
            "minimum": 0,
            "maximum": 100
          }
        }
      },
      "ProjectUpdatedResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Project updated successfully"
          },
          "data": {
            "$ref": "#/components/schemas/ProjectBasic"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
