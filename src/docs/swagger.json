{
  "openapi": "3.0.0",
  "info": {
    "title": "TaskTrial APIs",
    "version": "1.0.0",
    "description": "Project Management App",
    "contact": {
      "email": "tasktrial27@gmail.com"
    },
    "license": {
      "name": "MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local development server"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "User",
      "description": "User management"
    },
    {
      "name": "Organization",
      "description": "Organization management"
    },
    {
      "name": "Department",
      "description": "Department management"
    },
    {
      "name": "Team",
      "description": "Team management"
    },
    {
      "name": "Project",
      "description": "Project management"
    },
    {
      "name": "Sprint",
      "description": "Sprint management"
    },
    {
      "name": "Task",
      "description": "Task management"
    },
    {
      "name": "Activity Logs",
      "description": "Activity Logs management"
    }
  ],
  "paths": {
    "/api/auth/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "Creates a new user account and sends verification OTP to email",
        "description": "Register a new user with email, password, and personal details. Sends verification OTP to the provided email.",
        "operationId": "signup",
        "requestBody": {
          "description": "User registration data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password",
                  "firstName",
                  "lastName",
                  "username"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "minLength": 6,
                    "example": "securePassword123"
                  },
                  "firstName": {
                    "type": "string",
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Doe"
                  },
                  "username": {
                    "type": "string",
                    "example": "johndoe"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully. Verification OTP sent to email.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User created. Please verify your email."
                    },
                    "userId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or user already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User with this email or username already exists"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Too many requests, please try again later."
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/auth/resendOTP": {
      "post": {
        "tags": ["Auth"],
        "summary": "Resend OTP code for email verification",
        "description": "Generates a new OTP and sends it to the user's email if the previous one expired or wasn't received.",
        "operationId": "resendOTP",
        "requestBody": {
          "description": "Email address to resend OTP",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP resent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Code sent successfully. Please check your email"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Please enter a valid email"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Too many requests, please try again later."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to send email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "object"
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to send verification email. Please try again later."
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/auth/verifyEmail": {
      "post": {
        "tags": ["Auth"],
        "summary": "Verify user's email address using OTP",
        "description": "Validates the OTP sent to user's email and activates their account if verification is successful.",
        "operationId": "verifyEmail",
        "requestBody": {
          "description": "Email and OTP for verification",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "otp"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "otp": {
                    "type": "string",
                    "description": "6-digit verification code",
                    "example": "123456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email verified successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error, invalid OTP, or email already verified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired OTP"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Too many requests, please try again later."
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/auth/signin": {
      "post": {
        "tags": ["Auth"],
        "summary": "Authenticate user and return JWT tokens",
        "description": "Validates user credentials and returns access and refresh tokens if authentication is successful.",
        "operationId": "signin",
        "requestBody": {
          "description": "User credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "yourpassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User login successfully"
                    },
                    "accessToken": {
                      "type": "string",
                      "description": "JWT access token",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "refreshToken": {
                      "type": "string",
                      "description": "JWT refresh token (also set as HTTP-only cookie)",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "email": {
                          "type": "string",
                          "format": "email"
                        },
                        "name": {
                          "type": "string"
                        },
                        "role": {
                          "type": "string",
                          "enum": ["MEMBER", "ADMIN", "SUPER_ADMIN"]
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "schema": {
                  "type": "string",
                  "example": "refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Max-Age=604800"
                },
                "description": "Refresh token set as HTTP-only cookie"
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "\"email\" is required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid email or password"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Account not activated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Account not activated. Please verify your email"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Too many requests, please try again later."
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/auth/forgotPassword": {
      "post": {
        "tags": ["Auth"],
        "summary": "Initiate password reset process",
        "description": "Sends a password reset OTP to the user's email address if the account exists.",
        "operationId": "forgotPassword",
        "requestBody": {
          "description": "User's email address",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email"],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset OTP sent if account exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password reset OTP sent"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "\"email\" is required"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Too many requests, please try again later."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to send email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Failed to send password reset email"
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/auth/resetPassword": {
      "post": {
        "tags": ["Auth"],
        "summary": "Reset user password using OTP",
        "description": "Allows users to reset their password by providing a valid OTP sent to their email.",
        "operationId": "resetPassword",
        "requestBody": {
          "description": "Password reset details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address"
                  },
                  "otp": {
                    "type": "string",
                    "description": "One-time password received via email"
                  },
                  "newPassword": {
                    "type": "string",
                    "format": "password",
                    "description": "New password to set",
                    "minLength": 6
                  }
                },
                "required": ["email", "otp", "newPassword"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password reset successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Invalid or expired reset token"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Validation error message"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [],
        "x-rate-limit": {
          "description": "Rate limited to prevent brute force attacks"
        }
      }
    },
    "/api/auth/forgotPasswordWithoutEmail": {
      "post": {
        "tags": ["Auth"],
        "summary": "Initiate password reset using refreshToken",
        "description": "Generates and sends a password reset OTP to the user's email identified by their refreshToken. Requires valid refreshToken cookie.",
        "operationId": "forgotPasswordWithoutEmail",
        "responses": {
          "200": {
            "description": "OTP sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password reset OTP sent"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "No token provided"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "x-rate-limit": {
          "description": "Rate limited to prevent abuse"
        }
      }
    },
    "/api/auth/resetPasswordWithoutEmail": {
      "post": {
        "tags": ["Auth"],
        "summary": "Reset password using OTP (refreshToken flow)",
        "description": "Resets user's password using OTP received via email. Requires valid refreshToken cookie.",
        "operationId": "resetPasswordWithoutEmail",
        "requestBody": {
          "description": "Password reset details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "otp": {
                    "type": "string",
                    "description": "One-time password received via email"
                  },
                  "newPassword": {
                    "type": "string",
                    "format": "password",
                    "description": "New password to set",
                    "minLength": 6
                  }
                },
                "required": ["otp", "newPassword"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password reset successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Invalid or expired reset token"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Validation error message"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "No token provided"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "x-rate-limit": {
          "description": "Rate limited to prevent brute force attacks"
        }
      }
    },
    "/api/auth/refreshAccessToken": {
      "post": {
        "tags": ["Auth"],
        "summary": "Generate new access token using refresh token",
        "description": "Creates a new access token when provided with a valid refresh token.",
        "operationId": "refreshAccessToken",
        "requestBody": {
          "description": "Refresh token",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["refreshToken"],
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "description": "Valid refresh token obtained during signin",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New access token generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "description": "New JWT access token",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Refresh token missing",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Refresh token missing"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Invalid or mismatched refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid refresh token"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Too many requests, please try again later."
                    }
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/api/users/all": {
      "get": {
        "tags": ["User"],
        "summary": "Get all users with pagination",
        "description": "Retrieves a paginated list of all users. Requires admin permission.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "List of users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Users retrieved successfully"
                    },
                    "currentPage": {
                      "type": "integer",
                      "example": 1
                    },
                    "totalPages": {
                      "type": "integer",
                      "example": 5
                    },
                    "totalUsers": {
                      "type": "integer",
                      "example": 42
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid",
                            "example": "123e4567-e89b-12d3-a456-426614174000"
                          },
                          "email": {
                            "type": "string",
                            "format": "email",
                            "example": "user@example.com"
                          },
                          "firstName": {
                            "type": "string",
                            "example": "John"
                          },
                          "lastName": {
                            "type": "string",
                            "example": "Doe"
                          },
                          "role": {
                            "type": "string",
                            "example": "USER"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User does not have admin permissions"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": ["User"],
        "summary": "Get full user profile by ID",
        "description": "Retrieves detailed information about a specific user. Requires authentication and appropriate permissions.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User retrieved successfully"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid",
                          "example": "123e4567-e89b-12d3-a456-426614174000"
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "user@example.com"
                        },
                        "username": {
                          "type": "string",
                          "example": "johndoe"
                        },
                        "firstName": {
                          "type": "string",
                          "example": "John"
                        },
                        "lastName": {
                          "type": "string",
                          "example": "Doe"
                        },
                        "role": {
                          "type": "string",
                          "example": "USER"
                        },
                        "profilePic": {
                          "type": "string",
                          "nullable": true,
                          "example": "https://example.com/profile.jpg"
                        },
                        "phoneNumber": {
                          "type": "string",
                          "nullable": true,
                          "example": "+1234567890"
                        },
                        "jobTitle": {
                          "type": "string",
                          "nullable": true,
                          "example": "Software Developer"
                        },
                        "timezone": {
                          "type": "string",
                          "nullable": true,
                          "example": "America/New_York"
                        },
                        "bio": {
                          "type": "string",
                          "nullable": true,
                          "example": "Software developer with 5 years of experience"
                        },
                        "preferences": {
                          "type": "object",
                          "nullable": true
                        },
                        "isActive": {
                          "type": "boolean",
                          "example": true
                        },
                        "isOwner": {
                          "type": "boolean",
                          "example": false
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "lastLogin": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true
                        },
                        "lastLogout": {
                          "type": "string",
                          "format": "date-time",
                          "nullable": true
                        },
                        "department": {
                          "type": "object",
                          "nullable": true,
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "name": {
                              "type": "string"
                            }
                          }
                        },
                        "organization": {
                          "type": "object",
                          "nullable": true,
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "name": {
                              "type": "string"
                            }
                          }
                        },
                        "permissions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "entityType": {
                                "type": "string"
                              },
                              "entityId": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "permissions": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "teamMemberships": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "team": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "format": "uuid"
                                  },
                                  "name": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "activityLogs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "action": {
                                "type": "string"
                              },
                              "createdAt": {
                                "type": "string",
                                "format": "date-time"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User does not have required permissions"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": ["User"],
        "summary": "Update user account",
        "description": "Updates user account information. Users can update their own basic information, while admins can modify additional fields.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "User ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Doe"
                  },
                  "phoneNumber": {
                    "type": "string",
                    "example": "+1234567890"
                  },
                  "jobTitle": {
                    "type": "string",
                    "example": "Senior Developer"
                  },
                  "timezone": {
                    "type": "string",
                    "example": "America/New_York"
                  },
                  "bio": {
                    "type": "string",
                    "example": "Software developer with extensive experience"
                  },
                  "role": {
                    "type": "string",
                    "description": "Admin only field",
                    "example": "ADMIN"
                  },
                  "departmentId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Admin only field"
                  },
                  "organizationId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "Admin only field"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User account updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User account updated successfully"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "email": {
                          "type": "string",
                          "format": "email"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "role": {
                          "type": "string"
                        },
                        "phoneNumber": {
                          "type": "string",
                          "nullable": true
                        },
                        "jobTitle": {
                          "type": "string",
                          "nullable": true
                        },
                        "timezone": {
                          "type": "string",
                          "nullable": true
                        },
                        "bio": {
                          "type": "string",
                          "nullable": true
                        },
                        "departmentId": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": true
                        },
                        "organizationId": {
                          "type": "string",
                          "format": "uuid",
                          "nullable": true
                        },
                        "profilePic": {
                          "type": "string",
                          "nullable": true
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input or validation error"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User does not have required permissions or account is not active"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/update-password/{id}": {
      "patch": {
        "tags": ["User"],
        "summary": "Update user password",
        "description": "Allows a user to update their password by providing the old and new passwords. User can only update their own password.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "User ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["oldPassword", "newPassword"],
                "properties": {
                  "oldPassword": {
                    "type": "string",
                    "description": "User's current password",
                    "example": "CurrentP@ssw0rd"
                  },
                  "newPassword": {
                    "type": "string",
                    "description": "New password to set",
                    "example": "NewP@ssw0rd123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password updated successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input, validation error, incorrect old password, or new password same as old password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Incorrect old password"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User does not have required permissions"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/delete/{id}": {
      "delete": {
        "tags": ["User"],
        "summary": "Soft delete a user",
        "description": "Soft deletes a user by setting deletedAt to current date and making them inactive. Admin permission required.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "User ID to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - User already deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User already deleted"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User does not have admin permissions"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/restore/{id}": {
      "patch": {
        "tags": ["User"],
        "summary": "Restore a soft-deleted user",
        "description": "Restores a previously soft-deleted user by clearing their deletedAt field and setting isActive to true. Requires admin permission.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "User ID to restore"
          }
        ],
        "responses": {
          "200": {
            "description": "User restored successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User restored successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User does not have admin permissions"
          },
          "404": {
            "description": "User not found or not deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found or not deleted"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/{id}/profile-picture": {
      "post": {
        "tags": ["User"],
        "summary": "Upload a user profile picture",
        "description": "Uploads and sets a profile picture for a user. Users can upload their own pictures or admins can upload for any user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "User ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Profile picture image file"
                  }
                },
                "required": ["image"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile picture uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Profile picture uploaded successfully"
                    },
                    "profilePicUrl": {
                      "type": "string",
                      "example": "https://cloudinary.com/example/profile_picture.jpg"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "email": {
                          "type": "string",
                          "format": "email"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "profilePic": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - User ID is required or no file uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "No file uploaded"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User does not have required permissions"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "summary": "Delete user profile picture",
        "description": "Removes the profile picture for a user and sets the profilePic field to null. Users can delete their own pictures or admins can delete for any user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Profile picture deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Profile picture deleted successfully"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "email": {
                          "type": "string",
                          "format": "email"
                        },
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        },
                        "profilePic": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - User ID is required",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User ID is required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "403": {
            "description": "Forbidden - User does not have required permissions"
          },
          "404": {
            "description": "Profile picture not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Profile picture not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/organization": {
      "post": {
        "tags": ["Organization"],
        "summary": "Create a new organization",
        "description": "Creates a new organization with the current user as the owner or a specified user as owner",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "contactEmail"],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Organization name",
                    "example": "Acme Corporation"
                  },
                  "description": {
                    "type": "string",
                    "description": "Organization description",
                    "example": "A leading provider of innovative solutions"
                  },
                  "industry": {
                    "type": "string",
                    "description": "Industry sector",
                    "example": "Technology"
                  },
                  "sizeRange": {
                    "type": "string",
                    "description": "Size range of the organization",
                    "example": "50-100"
                  },
                  "website": {
                    "type": "string",
                    "format": "uri",
                    "description": "Organization website URL",
                    "example": "https://acme.example.com"
                  },
                  "logoUrl": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL to organization logo",
                    "example": "https://example.com/logo.png"
                  },
                  "address": {
                    "type": "string",
                    "description": "Organization address",
                    "example": "123 Main St, Anytown, USA"
                  },
                  "contactEmail": {
                    "type": "string",
                    "format": "email",
                    "description": "Organization contact email",
                    "example": "contact@acme.example.com"
                  },
                  "contactPhone": {
                    "type": "string",
                    "description": "Organization contact phone",
                    "example": "+1-234-567-8900"
                  },
                  "orgOwnerId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "User ID to set as organization owner (optional, defaults to current user)",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organization created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Organization created successfully."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "organization": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "name": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string",
                              "example": "APPROVED"
                            },
                            "isVerified": {
                              "type": "boolean",
                              "example": true
                            }
                          }
                        },
                        "organizationOwner": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "format": "uuid"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Name is required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "409": {
            "description": "Conflict - Organization with name or email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization with this name or email already exists"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/organization/resendOTP/{orgId}": {
      "post": {
        "tags": ["Organization"],
        "summary": "Resend OTP verification code",
        "description": "Generates a new OTP code and sends it to the organization's contact email for verification",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organization ID"
          }
        ],
        "responses": {
          "200": {
            "description": "OTP sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Code send successfully. Please check your email"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing organization ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Organization ID is required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Organization not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error or failed to send email",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to send verification email. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/verifyOrg/{orgId}": {
      "post": {
        "tags": ["Organization"],
        "summary": "Verify organization using OTP",
        "description": "Verifies an organization's contact email using the provided OTP code",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orgId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organization ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["otp"],
                "properties": {
                  "otp": {
                    "type": "string",
                    "description": "Verification OTP code",
                    "example": "123456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization verified successfully or already verified",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization verified successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or expired OTP",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired OTP"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/organization/all": {
      "get": {
        "tags": ["Organization"],
        "summary": "Get paginated list of organizations",
        "description": "Returns a paginated list of organizations with filtering, sorting, and permission-based access control.",
        "operationId": "getAllOrganizations",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "required": false,
            "schema": {
              "type": "string",
              "default": "createdAt",
              "enum": ["createdAt", "name", "industry", "sizeRange", "status"]
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order",
            "required": false,
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by organization name (contains, case-insensitive)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "industry",
            "in": "query",
            "description": "Filter by industry",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sizeRange",
            "in": "query",
            "description": "Filter by size range",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isVerified",
            "in": "query",
            "description": "Filter by verification status",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Organizations retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "organizations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/OrganizationWithStats"
                          }
                        },
                        "pagination": {
                          "$ref": "#/components/schemas/Pagination"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{organizationId}": {
      "get": {
        "tags": ["Organization"],
        "summary": "Get organization details",
        "description": "Returns detailed information about a specific organization including related entities (departments, teams, projects) with permission checks.",
        "operationId": "getSpecificOrganization",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "ID of the organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Organization retrieved successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/OrganizationDetails"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Organization"],
        "summary": "Update organization",
        "description": "Updates organization details with validation and permission checks. Admins and organization owners can update all fields, others have restricted access.",
        "operationId": "updateOrganization",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "ID of the organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Organization update data",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OrganizationUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Organization updated successfully"
                    },
                    "note": {
                      "type": "string",
                      "example": "Please verify your organization email"
                    },
                    "data": { "$ref": "#/components/schemas/OrganizationBasic" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Validation error"
                    },
                    "errors": { "type": "array", "items": { "type": "string" } }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "409": {
            "description": "Conflict - Organization name exists",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "500": {
            "description": "Email verification failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": false },
                    "message": {
                      "type": "string",
                      "example": "Organization updated but failed to send verification email"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Organization"],
        "summary": "Soft delete an organization",
        "description": "Marks an organization as deleted but retains it in the database. Only accessible to admins and organization owners.",
        "operationId": "deleteOrganization",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "ID of the organization to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean", "example": true },
                    "message": {
                      "type": "string",
                      "example": "Organization deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing organization ID",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Organization not found or already deleted",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/api/organization/{organizationId}/addOwner": {
      "post": {
        "tags": ["Organization"],
        "summary": "Add owners to an organization",
        "description": "Adds one or more users as owners to an organization. Requires admin or existing owner permissions.",
        "operationId": "addOwners",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "ID of the organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "User IDs to add as owners",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["userIds"],
                "properties": {
                  "userIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "description": "Array of user IDs to add as owners",
                    "example": ["123e4567-e89b-12d3-a456-426614174000"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Owners added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully added 2 owner(s) to the organization"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "addedOwners": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UserBasic"
                          }
                        },
                        "skippedOwners": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or invalid user IDs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "object",
                      "properties": {
                        "invalidUserIds": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{organizationId}/logo/upload": {
      "post": {
        "tags": ["Organization"],
        "summary": "Upload organization logo",
        "description": "Uploads a logo image for the organization. Requires admin or owner permissions.",
        "operationId": "uploadOrganizationLogo",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "ID of the organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Logo image file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logo uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization logo uploaded successfully"
                    },
                    "logoUrl": {
                      "type": "string",
                      "format": "uri"
                    },
                    "organization": {
                      "$ref": "#/components/schemas/OrganizationBasic"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "No file uploaded or missing organization ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/organization/{organizationId}/logo/delete": {
      "delete": {
        "tags": ["Organization"],
        "summary": "Delete organization logo",
        "description": "Deletes the organization's logo. Requires admin or owner permissions.",
        "operationId": "deleteOrganizationLogo",
        "security": [{ "BearerAuth": [] }],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "ID of the organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logo deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Organization logo deleted successfully"
                    },
                    "organization": {
                      "$ref": "#/components/schemas/OrganizationBasic"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing organization ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization or logo not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },

  "components": {
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "refreshToken",
        "description": "Refresh token cookie for authentication"
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": ["MEMBER", "ADMIN", "SUPER_ADMIN"],
            "default": "MEMBER"
          },
          "isActive": {
            "type": "boolean",
            "default": false
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OrganizationWithStats": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "industry": {
            "type": "string"
          },
          "sizeRange": {
            "type": "array",
            "enum": ["1-10", "11-50", "51-200", "201-500", "501-1000", "1001+"]
          },
          "website": {
            "type": "string"
          },
          "logoUrl": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "isVerified": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "statistics": {
            "type": "object",
            "properties": {
              "usersCount": {
                "type": "integer"
              },
              "departmentsCount": {
                "type": "integer"
              },
              "teamsCount": {
                "type": "integer"
              },
              "projectsCount": {
                "type": "integer"
              }
            }
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string",
                  "format": "email"
                }
              }
            }
          }
        }
      },
      "OrganizationDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "industry": {
            "type": "string"
          },
          "sizeRange": {
            "type": "array",
            "enum": ["1-10", "11-50", "51-200", "201-500", "501-1000", "1001+"]
          },
          "website": {
            "type": "string"
          },
          "logoUrl": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "isVerified": {
            "type": "boolean"
          },
          "contactEmail": {
            "type": "string",
            "format": "email"
          },
          "contactPhone": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "statistics": {
            "type": "object",
            "properties": {
              "usersCount": {
                "type": "integer"
              },
              "departmentsCount": {
                "type": "integer"
              },
              "teamsCount": {
                "type": "integer"
              },
              "projectsCount": {
                "type": "integer"
              },
              "templatesCount": {
                "type": "integer"
              }
            }
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string",
                  "format": "email"
                },
                "profileImage": {
                  "type": "string"
                }
              }
            }
          },
          "departments": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "usersCount": {
                  "type": "integer"
                },
                "teamsCount": {
                  "type": "integer"
                }
              }
            }
          },
          "teams": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "usersCount": {
                  "type": "integer"
                },
                "projectsCount": {
                  "type": "integer"
                }
              }
            }
          },
          "projects": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "startDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "endDate": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "hasMoreDepartments": {
            "type": "boolean"
          },
          "hasMoreTeams": {
            "type": "boolean"
          },
          "hasMoreProjects": {
            "type": "boolean"
          }
        }
      },
      "OrganizationUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "maxLength": 500
          },
          "industry": {
            "type": "string",
            "maxLength": 50
          },
          "sizeRange": {
            "type": "array",
            "enum": ["1-10", "11-50", "51-200", "201-500", "501-1000", "1001+"]
          },
          "website": {
            "type": "string",
            "format": "uri",
            "maxLength": 100
          },
          "logoUrl": {
            "type": "string",
            "format": "uri",
            "maxLength": 255
          },
          "contactEmail": {
            "type": "string",
            "format": "email",
            "maxLength": 100
          },
          "contactPhone": {
            "type": "string",
            "maxLength": 20
          },
          "address": {
            "type": "string",
            "maxLength": 255
          },
          "isVerified": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "enum": ["ACTIVE", "PENDING", "SUSPENDED"]
          }
        }
      },
      "OrganizationBasic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "industry": {
            "type": "string"
          },
          "sizeRange": {
            "type": "array",
            "enum": ["1-10", "11-50", "51-200", "201-500", "501-1000", "1001+"]
          },
          "website": {
            "type": "string"
          },
          "logoUrl": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "isVerified": {
            "type": "boolean"
          },
          "contactEmail": {
            "type": "string",
            "format": "email"
          },
          "contactPhone": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer"
          },
          "page": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          },
          "pages": {
            "type": "integer"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "Error message"
          }
        }
      },
      "UserBasic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Combined first and last name"
          },
          "email": {
            "type": "string",
            "format": "email"
          }
        }
      }
    }
  }
}
